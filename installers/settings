#!/bin/bash

set -e -u -o pipefail


NAME="$(basename -- "$0")"
PREFIX="$(dirname -- "$0")"

DOTMACOS_PIP3_SPEC="git+https://github.com/shvenkat/dotmacos#egg=dotmacos"
MAC_CONFIG="$PREFIX/../mac"
# LINUX_CONFIG="$PREFIX/../linux"

USAGE="USAGE: $NAME [opts] --exec-dir <path> --config-dir <path> [config args]"
HELP="
SYNOPSIS

Applies OS and GUI application settings, using a combination of config files and
executable scripts. Root access, where needed, is acquired using sudo, so you
may need to enter your password.

On MacOS, dotmacos [1] is used to set preferences from config files. dotmacos is
installed if needed.

On Linux, config files are not yet supported.

$USAGE

    --exec-dir <path>    Path to directory of scripts to be executed.
    --config-dir <path>  Path to directory of config files.
    --dry-run            Show what would happen without doing it.
    -v|--verbose         Show informational messages during execution. Repeat to
                         see debug messages too.
    -h|--help            Show this help message.

NOTE FOR NEW USERS

With dotmacos, you can store your Mac OS and application preferences in simple
config files that can be easily applied, backed up, copied to new machines and

[1]: https://github.com/shvenkat/dotmacos"


# ----------  functions  -----------------------------------------------------

# Format and print log messages.
#   $1: Log level: error, warn, info or debug.
#   $2 [$3 ...]: Log messages (will be concatenated with spaces in between).
log () {
    if [ -t 1 ]; then
        NORMAL="\\033[0m"
        BOLD="\\033[1m"
        RED="\\033[31m"
        YELLOW="\\033[33m"
    else
        NORMAL=""
        BOLD=""
        RED=""
        YELLOW=""
    fi
    level="$1"
    shift
    if [ "$level" = "error" ]; then
        echo -e " ${RED}E${NORMAL} ${BOLD}$*${NORMAL}" 1>&2
    elif [ "$level" = "warn" ]; then
        echo -e " ${YELLOW}W${NORMAL} ${BOLD}$*${NORMAL}" 1>&2
    elif [ "$level" = "info" ]; then
        if [ "$VERBOSITY" -gt 0 ]; then
            echo -e "   $*" 1>&2
        fi
    elif [ "$level" = "debug" ]; then
        if [ "$VERBOSITY" -gt 1 ]; then
            echo -e "   $*" 1>&2
        fi
    fi
}

# Run a command, logging its output. Errors are logged.
# Args:
#   $@: Command and arguments to be run.
run () {
    log debug "    $*"
    set +e
    output="$("$@" 2>&1)"
    retval=$?
    set -e
    echo "$output" | while IFS='' read -r line; do log debug "    $line"; done
    if [ "$retval" -ne 0 ]; then
        log error "Failed: $*"
        return 1
    fi
}


# Run executables in a given directory.
# Args:
#   $1: Path to directory containing executables.
#   $2: If "true", this is a dry run.
do_exec () {
    local exec_dir="$1"
    local dry_run="$2"
    for file in "$exec_dir"/*; do
        if [[ -x "$file" ]]; then
            if [[ "$dry_run" == "true" ]]; then
                VERBOSITY=1 log info "Running $file."
            else
                run "$file"
            fi
        fi
    done
}


# Install dotmacos, if not already installed, using pip3.
# Args: None.
install_dotmacos () {
    if which dotmacos >/dev/null 2>&1; then
        return
    fi
    if ! which pip3 >/dev/null 2>&1; then
        log error "pip3 not found. Please check that python3 is installed" \
            "and in \$PATH."
        exit 1
    fi
    if [[ -n "$VIRTUAL_ENV" ]]; then
        log error "Cannot install dotmacos with an active python virtual env." \
            "Please run 'deactivate' first."
        exit 1
    fi
    run pip3 install "$DOTMACOS_PIP3_SPEC"
}


# Set Mac preferences from a given config dir.
# Args:
#   $1: Path to directory containing dotmacos config files.
#   $2: If "true", this is a dry run.
#   $@: Additional arguments to dotmacos.
run_dotmacos () {
    local config_dir="$1"
    local dry_run="$2"
    shift
    shift
    if [[ "$dry_run" == "true" ]]; then
        VERBOSITY=2 run dotmacos set --dry-run "$@" "$config_dir"/*
    else
        run dotmacos set "$@" "$config_dir"/*
    fi
}


# ----------  main  ----------------------------------------------------------

# Parse arguments.
exec_dir=""
config_dir=""
dry_run="false"
VERBOSITY=0
while [ $# -gt 0 ]; do
    case "$1" in
        --exec-dir)
            if [ $# -lt 2 ]; then
                log error "Missing <path> argument following --exec-dir."
                echo "$USAGE" 1>&2
                exit 1
            fi
            exec_dir="$2"
            shift
            shift
            ;;
        --config-dir)
            if [ $# -lt 2 ]; then
                log error "Missing <path> argument following --config-dir."
                echo "$USAGE" 1>&2
                exit 1
            fi
            config_dir="$2"
            shift
            shift
            ;;
        --dry-run)
            dry_run="true"
            shift
            ;;
        -v|--verbose)
            VERBOSITY=$((VERBOSITY + 1))
            shift
            ;;
        -vv)
            VERBOSITY=$((VERBOSITY + 2))
            shift
            ;;
        -h|--help)
            echo "$HELP"
            exit 0
            ;;
        *)
            break
    esac
done

if [[ -n "$exec_dir" ]]; then
    do_exec "$exec_dir" "$dry_run"
fi

if [[ -n "$config_dir" ]]; then
    OSTYPE="$(uname -s | tr '[:upper:]' '[:lower:]')"
    case "$OSTYPE" in
        linux*)
            ;;
        darwin*)
            install_dotmacos
            run_dotmacos "$config_dir" "$dry_run" "$@"
            ;;
        *)
            log error "Unknown OS type: $OSTYPE"
            exit 1
    esac
fi
