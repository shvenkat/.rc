# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2009-2015, Marcel Hellkamp
# This file is distributed under the same license as the Bottle package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: bottle\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-01-22 16:45-0200\n"
"PO-Revision-Date: 2015-01-22 19:20+0000\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: Portuguese (Brazil) (http://www.transifex.com/projects/p/bottle/language/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

# 916ac7f3b8144f5098d68578868e93d3
#: ../../tutorial.rst:24
msgid "Tutorial"
msgstr ""

# e41456f5f98149fbbced99bf6f3ad9a2
#: ../../tutorial.rst:26
msgid ""
"This tutorial introduces you to the concepts and features of the Bottle web "
"framework and covers basic and advanced topics alike. You can read it from "
"start to end, or use it as a reference later on. The automatically generated"
" :doc:`api` may be interesting for you, too. It covers more details, but "
"explains less than this tutorial. Solutions for the most common questions "
"can be found in our :doc:`recipes` collection or on the :doc:`faq` page. If "
"you need any help, join our `mailing list "
"<mailto:bottlepy@googlegroups.com>`_ or visit us in our `IRC channel "
"<http://webchat.freenode.net/?channels=bottlepy>`_."
msgstr ""

# af7ea57ddc8648bf8148b2a520f009b0
#: ../../tutorial.rst:31
msgid "Installation"
msgstr ""

# a3e393a63d73430f970beb1206e88eae
#: ../../tutorial.rst:33
msgid ""
"Bottle does not depend on any external libraries. You can just download "
"`bottle.py </bottle.py>`_ into your project directory and start coding:"
msgstr ""

# b22d1ab386ac41a0bb7a62049cd90685
#: ../../tutorial.rst:39
msgid ""
"This will get you the latest development snapshot that includes all the new "
"features. If you prefer a more stable environment, you should stick with the"
" stable releases. These are available on `PyPI "
"<http://pypi.python.org/pypi/bottle>`_ and can be installed via "
":command:`pip` (recommended), :command:`easy_install` or your package "
"manager:"
msgstr ""

# 6370b74c81174ef7b73564ca52e77f30
#: ../../tutorial.rst:47
msgid ""
"Either way, you'll need Python 2.5 or newer (including 3.x) to run bottle "
"applications. If you do not have permissions to install packages system-wide"
" or simply don't want to, create a `virtualenv "
"<http://pypi.python.org/pypi/virtualenv>`_ first:"
msgstr ""

# 231776fdacc64529a13944d3994fe4c4
#: ../../tutorial.rst:55
msgid "Or, if virtualenv is not installed on your system:"
msgstr ""

# b05bd61e6a17484ea34fa6b69cf8a627
#: ../../tutorial.rst:67
msgid "Quickstart: \"Hello World\""
msgstr ""

# 25c51a08cddf4d4fad50ad205234cb72
#: ../../tutorial.rst:69
msgid ""
"This tutorial assumes you have Bottle either :ref:`installed <installation>`"
" or copied into your project directory. Let's start with a very basic "
"\"Hello World\" example::"
msgstr ""

# ecd1dd3fb42943d29e75552e60652099
#: ../../tutorial.rst:79
msgid ""
"This is it. Run this script, visit http://localhost:8080/hello and you will "
"see \"Hello World!\" in your browser. Here is how it works:"
msgstr ""

# cf840688614b4d5c9adef7a962b8bcb8
#: ../../tutorial.rst:81
msgid ""
"The :func:`route` decorator binds a piece of code to an URL path. In this "
"case, we link the ``/hello`` path to the ``hello()`` function. This is "
"called a `route` (hence the decorator name) and is the most important "
"concept of this framework. You can define as many routes as you want. "
"Whenever a browser requests a URL, the associated function is called and the"
" return value is sent back to the browser. It's as simple as that."
msgstr ""

# 528edb20b41743459e90d06fd9750c7c
#: ../../tutorial.rst:83
msgid ""
"The :func:`run` call in the last line starts a built-in development server. "
"It runs on ``localhost`` port ``8080`` and serves requests until you hit "
":kbd:`Control-c`. You can switch the server backend later, but for now a "
"development server is all we need. It requires no setup at all and is an "
"incredibly painless way to get your application up and running for local "
"tests."
msgstr ""

# 3172226b91454392a5deb3bc643ed166
#: ../../tutorial.rst:85
msgid ""
"The :ref:`tutorial-debugging` is very helpful during early development, but "
"should be switched off for public applications. Keep that in mind."
msgstr ""

# a5019875879b47689a401f7267240e8c
#: ../../tutorial.rst:87
msgid ""
"Of course this is a very simple example, but it shows the basic concept of "
"how applications are built with Bottle. Continue reading and you'll see what"
" else is possible."
msgstr ""

# e837dae88a164a05bc74f0601c582444
#: ../../tutorial.rst:92
msgid "The Default Application"
msgstr ""

# 806b156066ff4cd29e6f56b97e6c45e3
#: ../../tutorial.rst:94
msgid ""
"For the sake of simplicity, most examples in this tutorial use a module-"
"level :func:`route` decorator to define routes. This adds routes to a global"
" \"default application\", an instance of :class:`Bottle` that is "
"automatically created the first time you call :func:`route`. Several other "
"module-level decorators and functions relate to this default application, "
"but if you prefer a more object oriented approach and don't mind the extra "
"typing, you can create a separate application object and use that instead of"
" the global one::"
msgstr ""

# 2df3acc8f64f433b95d45e91d94e00e8
#: ../../tutorial.rst:106
msgid ""
"The object-oriented approach is further described in the :ref:`default-app` "
"section. Just keep in mind that you have a choice."
msgstr ""

# 5922fca14a164fcda76b0a6a56f4ec70
#: ../../tutorial.rst:114
msgid "Request Routing"
msgstr ""

# 8c34fd27ba1e4c0088ceab4bd99826fa
#: ../../tutorial.rst:116
msgid ""
"In the last chapter we built a very simple web application with only a "
"single route. Here is the routing part of the \"Hello World\" example "
"again::"
msgstr ""

# 8b418053759e4a729ebaefa794f9b5b7
#: ../../tutorial.rst:122
msgid ""
"The :func:`route` decorator links an URL path to a callback function, and "
"adds a new route to the :ref:`default application <tutorial-default>`. An "
"application with just one route is kind of boring, though. Let's add some "
"more (don't forget ``from bottle import template``)::"
msgstr ""

# 0d5c38469b44413d9754d4e77a28cb8d
#: ../../tutorial.rst:129
msgid ""
"This example demonstrates two things: You can bind more than one route to a "
"single callback, and you can add wildcards to URLs and access them via "
"keyword arguments."
msgstr ""

# bf73f39f2c9344819c3cf0a0ce4987a9
#: ../../tutorial.rst:136
msgid "Dynamic Routes"
msgstr ""

# 0181039f5b65482495809c4101fe74b9
#: ../../tutorial.rst:138
msgid ""
"Routes that contain wildcards are called `dynamic routes` (as opposed to "
"`static routes`) and match more than one URL at the same time. A simple "
"wildcard consists of a name enclosed in angle brackets (e.g. ``<name>``) and"
" accepts one or more characters up to the next slash (``/``). For example, "
"the route ``/hello/<name>`` accepts requests for ``/hello/alice`` as well as"
" ``/hello/bob``, but not for ``/hello``, ``/hello/`` or ``/hello/mr/smith``."
msgstr ""

# 9ea21ed0ef2c4c2ab84d14a522c987de
#: ../../tutorial.rst:140
msgid ""
"Each wildcard passes the covered part of the URL as a keyword argument to "
"the request callback. You can use them right away and implement RESTful, "
"nice-looking and meaningful URLs with ease. Here are some other examples "
"along with the URLs they'd match::"
msgstr ""

# a5c653d0a2584d829ca0b004a096659d
#: ../../tutorial.rst:152
msgid ""
"Filters are used to define more specific wildcards, and/or transform the "
"covered part of the URL before it is passed to the callback. A filtered "
"wildcard is declared as ``<name:filter>`` or ``<name:filter:config>``. The "
"syntax for the optional config part depends on the filter used."
msgstr ""

# e9b34bc84c024ac284534285631c6310
#: ../../tutorial.rst:154
msgid ""
"The following filters are implemented by default and more may be added:"
msgstr ""

# bf08294f4c7c4bd1908c4c376f9aada9
#: ../../tutorial.rst:156
msgid ""
"**:int** matches (signed) digits only and converts the value to integer."
msgstr ""

# 74e3fee4663b41599cd01c95499c7f0f
#: ../../tutorial.rst:157
msgid "**:float** similar to :int but for decimal numbers."
msgstr ""

# 9968ec2829bc43e9a604f8dd2775e82d
#: ../../tutorial.rst:158
msgid ""
"**:path** matches all characters including the slash character in a non-"
"greedy way and can be used to match more than one path segment."
msgstr ""

# c7c58c9cd1804ef19f7fb4e6909d5314
#: ../../tutorial.rst:159
msgid ""
"**:re** allows you to specify a custom regular expression in the config "
"field. The matched value is not modified."
msgstr ""

# d1664b21f95640b9b7848224150a1c2a
#: ../../tutorial.rst:161
msgid "Let's have a look at some practical examples::"
msgstr ""

# e2c015426d62427b8baf07a6dca84c98
#: ../../tutorial.rst:175
msgid "You can add your own filters as well. See :doc:`routing` for details."
msgstr ""

# dce499c468e547689f8f1f76fa72fb79
#: ../../tutorial.rst:179
msgid ""
"The new rule syntax was introduced in **Bottle 0.10** to simplify some "
"common use cases, but the old syntax still works and you can find a lot of "
"code examples still using it. The differences are best described by example:"
msgstr ""

# 4fdcb0127e6743288e7c1d6b6165107d
#: ../../tutorial.rst:182
msgid "Old Syntax"
msgstr ""

# bb8641cc26f2463f8c616a4b7642c861
#: ../../tutorial.rst:182
msgid "New Syntax"
msgstr ""

# 7c941561a45c4970b776e5f84f5a366e
#: ../../tutorial.rst:184
msgid "``:name``"
msgstr ""

# 0627940e3f3242afa41e781fa4713a85
#: ../../tutorial.rst:184
msgid "``<name>``"
msgstr ""

# d6e36ed6f0004129b81ec00a06259588
#: ../../tutorial.rst:185
msgid "``:name#regexp#``"
msgstr ""

# f141cc72cbaa4d3289dcde6e261fd516
#: ../../tutorial.rst:185
msgid "``<name:re:regexp>``"
msgstr ""

# dd11228910bb40bb800f000ab651c362
#: ../../tutorial.rst:186
msgid "``:#regexp#``"
msgstr ""

# 6856882d9711448e8a8b209229571aef
#: ../../tutorial.rst:186
msgid "``<:re:regexp>``"
msgstr ""

# 743f807f038d405ebd72fafc986ea77a
#: ../../tutorial.rst:187
msgid "``:##``"
msgstr ""

# 696dc779cccf40deb80bb15f28de0847
#: ../../tutorial.rst:187
msgid "``<:re>``"
msgstr ""

# 130a34b229ec4ad2b259dea070431d03
#: ../../tutorial.rst:190
msgid ""
"Try to avoid the old syntax in future projects if you can. It is not "
"currently deprecated, but will be eventually."
msgstr ""

# 864af2a245c54a00a3e1427f7a2d0727
#: ../../tutorial.rst:194
msgid "HTTP Request Methods"
msgstr ""

# 395fb41a1c104235a5aa04013b4b3a2f
#: ../../tutorial.rst:198
msgid ""
"The HTTP protocol defines several `request methods`__ (sometimes referred to"
" as \"verbs\") for different tasks. GET is the default for all routes with "
"no other method specified. These routes will match GET requests only. To "
"handle other methods such as POST, PUT, DELETE or PATCH, add a ``method`` "
"keyword argument to the :func:`route` decorator or use one of the four "
"alternative decorators: :func:`get`, :func:`post`, :func:`put`, "
":func:`delete` or :func:`patch`."
msgstr ""

# 38ed35133fb44f9a9bf5d2c9a6be2f32
#: ../../tutorial.rst:200
msgid ""
"The POST method is commonly used for HTML form submission. This example "
"shows how to handle a login form using POST::"
msgstr ""

# d17059ed777642ab94f518b284840688
#: ../../tutorial.rst:223
msgid ""
"In this example the ``/login`` URL is linked to two distinct callbacks, one "
"for GET requests and another for POST requests. The first one displays a "
"HTML form to the user. The second callback is invoked on a form submission "
"and checks the login credentials the user entered into the form. The use of "
":attr:`Request.forms` is further described in the :ref:`tutorial-request` "
"section."
msgstr ""

# e32d9ac6f2ee43dcb1398f0b9a0211bb
#: ../../tutorial.rst:226
msgid "Special Methods: HEAD and ANY"
msgstr ""

# 8a4bd657eb1444fca9f73e476ce83add
#: ../../tutorial.rst:227
msgid ""
"The HEAD method is used to ask for the response identical to the one that "
"would correspond to a GET request, but without the response body. This is "
"useful for retrieving meta-information about a resource without having to "
"download the entire document. Bottle handles these requests automatically by"
" falling back to the corresponding GET route and cutting off the request "
"body, if present. You don't have to specify any HEAD routes yourself."
msgstr ""

# 13d5ec233f9142a0a72d7c51d5b81aaf
#: ../../tutorial.rst:229
msgid ""
"Additionally, the non-standard ANY method works as a low priority fallback: "
"Routes that listen to ANY will match requests regardless of their HTTP "
"method but only if no other more specific route is defined. This is helpful "
"for *proxy-routes* that redirect requests to more specific sub-applications."
msgstr ""

# 2f5973de9de64648aed357b34a9bdb7f
#: ../../tutorial.rst:231
msgid ""
"To sum it up: HEAD requests fall back to GET routes and all requests fall "
"back to ANY routes, but only if there is no matching route for the original "
"request method. It's as simple as that."
msgstr ""

# ad164662e90f4041a85a2a11db1ee0c0
#: ../../tutorial.rst:236
msgid "Routing Static Files"
msgstr ""

# cd0e402ae2e540ec97c12063e42d6126
#: ../../tutorial.rst:238
msgid ""
"Static files such as images or CSS files are not served automatically. You "
"have to add a route and a callback to control which files get served and "
"where to find them::"
msgstr ""

# 3a2559a5b63d4ee9acb4440e8fe1a96b
#: ../../tutorial.rst:245
msgid ""
"The :func:`static_file` function is a helper to serve files in a safe and "
"convenient way (see :ref:`tutorial-static-files`). This example is limited "
"to files directly within the ``/path/to/your/static/files`` directory "
"because the ``<filename>`` wildcard won't match a path with a slash in it. "
"To serve files in subdirectories, change the wildcard to use the `path` "
"filter::"
msgstr ""

# f94439ce4dd24a4686de019b5220de9f
#: ../../tutorial.rst:251
msgid ""
"Be careful when specifying a relative root-path such as "
"``root='./static/files'``. The working directory (``./``) and the project "
"directory are not always the same."
msgstr ""

# 7190cf7dbf864ebd8b6c170aabbd3cd4
#: ../../tutorial.rst:259
msgid "Error Pages"
msgstr ""

# 5952f6f875ba4e9680b422c6eaf3433f
#: ../../tutorial.rst:261
msgid ""
"If anything goes wrong, Bottle displays an informative but fairly plain "
"error page. You can override the default for a specific HTTP status code "
"with the :func:`error` decorator::"
msgstr ""

# 426ced6e32c64e6dbe403e8d78fcc294
#: ../../tutorial.rst:268
msgid ""
"From now on, `404 File not Found` errors will display a custom error page to"
" the user. The only parameter passed to the error-handler is an instance of "
":exc:`HTTPError`. Apart from that, an error-handler is quite similar to a "
"regular request callback. You can read from :data:`request`, write to "
":data:`response` and return any supported data-type except for "
":exc:`HTTPError` instances."
msgstr ""

# 9a3f76d9b41c4aac95bf8f66199040f8
#: ../../tutorial.rst:270
msgid ""
"Error handlers are used only if your application returns or raises an "
":exc:`HTTPError` exception (:func:`abort` does just that). Changing "
":attr:`Request.status` or returning :exc:`HTTPResponse` won't trigger the "
"error handler."
msgstr ""

# f1092bc764cc43eb8282b79e64fdd6b1
#: ../../tutorial.rst:280
msgid "Generating content"
msgstr ""

# 56668c66a418409daf59198d87bddcd7
#: ../../tutorial.rst:282
msgid ""
"In pure WSGI, the range of types you may return from your application is "
"very limited. Applications must return an iterable yielding byte strings. "
"You may return a string (because strings are iterable) but this causes most "
"servers to transmit your content char by char. Unicode strings are not "
"allowed at all. This is not very practical."
msgstr ""

# f83bbefffadd44088cae7bad2965ef44
#: ../../tutorial.rst:284
msgid ""
"Bottle is much more flexible and supports a wide range of types. It even "
"adds a ``Content-Length`` header if possible and encodes unicode "
"automatically, so you don't have to. What follows is a list of data types "
"you may return from your application callbacks and a short description of "
"how these are handled by the framework:"
msgstr ""

# 5582a4ab861b4a0e95d77f4cc88d656b
#: ../../tutorial.rst:287
msgid "Dictionaries"
msgstr ""

# 0af07cab0f9c480190e8a9be3918e772
#: ../../tutorial.rst:287
msgid ""
"As mentioned above, Python dictionaries (or subclasses thereof) are "
"automatically transformed into JSON strings and returned to the browser with"
" the ``Content-Type`` header set to ``application/json``. This makes it easy"
" to implement json-based APIs. Data formats other than json are supported "
"too. See the :ref:`tutorial-output-filter` to learn more."
msgstr ""

# b20177cad06a4b3b90c53a2f8f58b81c
#: ../../tutorial.rst:290
msgid "Empty Strings, ``False``, ``None`` or other non-true values:"
msgstr ""

# cb9f588a721642e58e31a5528cf0aa4c
#: ../../tutorial.rst:290
msgid ""
"These produce an empty output with the ``Content-Length`` header set to 0."
msgstr ""

# 28cba6ed4b7b4957b430bb232ee63da1
#: ../../tutorial.rst:293
msgid "Unicode strings"
msgstr ""

# 9c2199e8fa46413bab1ea8298b4ee004
#: ../../tutorial.rst:293
msgid ""
"Unicode strings (or iterables yielding unicode strings) are automatically "
"encoded with the codec specified in the ``Content-Type`` header (utf8 by "
"default) and then treated as normal byte strings (see below)."
msgstr ""

# a698affc9a2c42339ec92d0731899f6f
#: ../../tutorial.rst:296
msgid "Byte strings"
msgstr ""

# d262affdb36c451a8019b09562c8256a
#: ../../tutorial.rst:296
msgid ""
"Bottle returns strings as a whole (instead of iterating over each char) and "
"adds a ``Content-Length`` header based on the string length. Lists of byte "
"strings are joined first. Other iterables yielding byte strings are not "
"joined because they may grow too big to fit into memory. The ``Content-"
"Length`` header is not set in this case."
msgstr ""

# 59157588717e485aabb23d0f768e5ced
#: ../../tutorial.rst:299
msgid "Instances of :exc:`HTTPError` or :exc:`HTTPResponse`"
msgstr ""

# 9d8efc187aec4989be3e1288c4c026fc
#: ../../tutorial.rst:299
msgid ""
"Returning these has the same effect as when raising them as an exception. In"
" case of an :exc:`HTTPError`, the error handler is applied. See :ref"
":`tutorial-errorhandling` for details."
msgstr ""

# 4c3d3fba4cc2450892b64b0a9223c274
#: ../../tutorial.rst:302
msgid "File objects"
msgstr ""

# 3574557ba4ac4fb386adcd8624e4b9be
#: ../../tutorial.rst:302
msgid ""
"Everything that has a ``.read()`` method is treated as a file or file-like "
"object and passed to the ``wsgi.file_wrapper`` callable defined by the WSGI "
"server framework. Some WSGI server implementations can make use of optimized"
" system calls (sendfile) to transmit files more efficiently. In other cases "
"this just iterates over chunks that fit into memory. Optional headers such "
"as ``Content-Length`` or ``Content-Type`` are *not* set automatically. Use "
":func:`send_file` if possible. See :ref:`tutorial-static-files` for details."
msgstr ""

# 7be34241e15f4b699d4540bee296437a
#: ../../tutorial.rst:305
msgid "Iterables and generators"
msgstr ""

# ac0488d7101847eeb1a33474a2bec821
#: ../../tutorial.rst:305
msgid ""
"You are allowed to use ``yield`` within your callbacks or return an "
"iterable, as long as the iterable yields byte strings, unicode strings, "
":exc:`HTTPError` or :exc:`HTTPResponse` instances. Nested iterables are not "
"supported, sorry. Please note that the HTTP status code and the headers are "
"sent to the browser as soon as the iterable yields its first non-empty "
"value. Changing these later has no effect."
msgstr ""

# 4904796ade9540ed9abbd72f956d39b0
#: ../../tutorial.rst:307
msgid ""
"The ordering of this list is significant. You may for example return a "
"subclass of :class:`str` with a ``read()`` method. It is still treated as a "
"string instead of a file, because strings are handled first."
msgstr ""

# 22fd5efc83884c8aade1ae0816f3382a
#: ../../tutorial.rst:310
msgid "Changing the Default Encoding"
msgstr ""

# b886ac8e69f7421ea52d0aac4e02eb7b
#: ../../tutorial.rst:311
msgid ""
"Bottle uses the `charset` parameter of the ``Content-Type`` header to decide"
" how to encode unicode strings. This header defaults to ``text/html; "
"charset=UTF8`` and can be changed using the :attr:`Response.content_type` "
"attribute or by setting the :attr:`Response.charset` attribute directly. "
"(The :class:`Response` object is described in the section :ref:`tutorial-"
"response`.)"
msgstr ""

# 9fb228f33a6b4d36bad93c056e913d85
#: ../../tutorial.rst:326
msgid ""
"In some rare cases the Python encoding names differ from the names supported"
" by the HTTP specification. Then, you have to do both: first set the "
":attr:`Response.content_type` header (which is sent to the client unchanged)"
" and then set the :attr:`Response.charset` attribute (which is used to "
"encode unicode)."
msgstr ""

# 6246a9980df8482a9d21b476e860e934
#: ../../tutorial.rst:331
msgid "Static Files"
msgstr ""

# 6577ce77ebce4154bea308e783a8f2c4
#: ../../tutorial.rst:333
msgid ""
"You can directly return file objects, but :func:`static_file` is the "
"recommended way to serve static files. It automatically guesses a mime-type,"
" adds a ``Last-Modified`` header, restricts paths to a ``root`` directory "
"for security reasons and generates appropriate error responses (403 on "
"permission errors, 404 on missing files). It even supports the ``If-"
"Modified-Since`` header and eventually generates a ``304 Not Modified`` "
"response. You can pass a custom MIME type to disable guessing."
msgstr ""

# d16e71e083184059bbf08afc0fb9a57d
#: ../../tutorial.rst:346
msgid ""
"You can raise the return value of :func:`static_file` as an exception if you"
" really need to."
msgstr ""

# c6a61579847e4979b39844da1c7c1437
#: ../../tutorial.rst:349
msgid "Forced Download"
msgstr ""

# 92e3e880d653496584a1fedb1c450809
#: ../../tutorial.rst:350
msgid ""
"Most browsers try to open downloaded files if the MIME type is known and "
"assigned to an application (e.g. PDF files). If this is not what you want, "
"you can force a download dialog and even suggest a filename to the user::"
msgstr ""

# 868eadb6b675438bbd4e4e00e77ea5dc
#: ../../tutorial.rst:356
msgid ""
"If the ``download`` parameter is just ``True``, the original filename is "
"used."
msgstr ""

# 5170980d61fa48c3a798819613bd979a
#: ../../tutorial.rst:361
msgid "HTTP Errors and Redirects"
msgstr ""

# 39600d8c864a413e8f0b91d7115903d9
#: ../../tutorial.rst:363
msgid ""
"The :func:`abort` function is a shortcut for generating HTTP error pages."
msgstr ""

# 89afe97f71a74600b0a92866b55c208c
#: ../../tutorial.rst:372
msgid ""
"To redirect a client to a different URL, you can send a ``303 See Other`` "
"response with the ``Location`` header set to the new URL. :func:`redirect` "
"does that for you::"
msgstr ""

# 2c6d6522d36f472baae5da4acd70dcad
#: ../../tutorial.rst:379
msgid "You may provide a different HTTP status code as a second parameter."
msgstr ""

# 8261a4a6a4db4182bcbfec5411cc864c
#: ../../tutorial.rst:382
msgid ""
"Both functions will interrupt your callback code by raising an "
":exc:`HTTPError` exception."
msgstr ""

# 7af63c8946c94640a29ea3c200e0cbfa
#: ../../tutorial.rst:385
msgid "Other Exceptions"
msgstr ""

# 38f50e2703a94839ad3744a16099dd0b
#: ../../tutorial.rst:386
msgid ""
"All exceptions other than :exc:`HTTPResponse` or :exc:`HTTPError` will "
"result in a ``500 Internal Server Error`` response, so they won't crash your"
" WSGI server. You can turn off this behavior to handle exceptions in your "
"middleware by setting ``bottle.app().catchall`` to ``False``."
msgstr ""

# 5b1413110d4b4fde8dbeac4ba1ac21d5
#: ../../tutorial.rst:392
msgid "The :class:`Response` Object"
msgstr ""

# f13e21c89da34f2a97acd3e1b95d2533
#: ../../tutorial.rst:394
msgid ""
"Response metadata such as the HTTP status code, response headers and cookies"
" are stored in an object called :data:`response` up to the point where they "
"are transmitted to the browser. You can manipulate these metadata directly "
"or use the predefined helper methods to do so. The full API and feature list"
" is described in the API section (see :class:`Response`), but the most "
"common use cases and features are covered here, too."
msgstr ""

# 38f06fec96ec47b29c0cbfc22de8dd25
#: ../../tutorial.rst:397
msgid "Status Code"
msgstr ""

# 5c082752523046a5803db071bd295050
#: ../../tutorial.rst:398
msgid ""
"The `HTTP status code <http_code>`_ controls the behavior of the browser and"
" defaults to ``200 OK``. In most scenarios you won't need to set the "
":attr:`Response.status` attribute manually, but use the :func:`abort` helper"
" or return an :exc:`HTTPResponse` instance with the appropriate status code."
" Any integer is allowed, but codes other than the ones defined by the `HTTP "
"specification <http_code>`_ will only confuse the browser and break "
"standards."
msgstr ""

# e58a3f9b92b845858b168ed8e7fd897c
#: ../../tutorial.rst:401
msgid "Response Header"
msgstr ""

# fe192653eed74523ab0c6ea7269aa31f
#: ../../tutorial.rst:402
msgid ""
"Response headers such as ``Cache-Control`` or ``Location`` are defined via "
":meth:`Response.set_header`. This method takes two parameters, a header name"
" and a value. The name part is case-insensitive::"
msgstr ""

# f0fe9d7d598146ff9d7f6b609556afbb
#: ../../tutorial.rst:409
msgid ""
"Most headers are unique, meaning that only one header per name is send to "
"the client. Some special headers however are allowed to appear more than "
"once in a response. To add an additional header, use "
":meth:`Response.add_header` instead of :meth:`Response.set_header`::"
msgstr ""

# cc53dfe73b784f368f983b0ab35b6590
#: ../../tutorial.rst:414
msgid ""
"Please note that this is just an example. If you want to work with cookies, "
"read :ref:`ahead <tutorial-cookies>`."
msgstr ""

# bff754a4f00341f7b58c157f392ed5e2
# d78c58fe2515483c9191fb1e9c0aa9dc
#: ../../tutorial.rst:420 ../../tutorial.rst:549
msgid "Cookies"
msgstr ""

# 2ce5fe9ac949486a90e4b6979ad388cb
#: ../../tutorial.rst:422
msgid ""
"A cookie is a named piece of text stored in the user's browser profile. You "
"can access previously defined cookies via :meth:`Request.get_cookie` and set"
" new cookies with :meth:`Response.set_cookie`::"
msgstr ""

# 073cba4dac4a4ba7ba7f084fe9e40c2a
#: ../../tutorial.rst:432
msgid ""
"The :meth:`Response.set_cookie` method accepts a number of additional "
"keyword arguments that control the cookies lifetime and behavior. Some of "
"the most common settings are described here:"
msgstr ""

# eeba19ba3d9249df9fc326022429b2c8
#: ../../tutorial.rst:434
msgid "**max_age:**    Maximum age in seconds. (default: ``None``)"
msgstr ""

# c62fb8cd2b7e41f589a2e88705ee9924
#: ../../tutorial.rst:435
msgid ""
"**expires:**    A datetime object or UNIX timestamp. (default: ``None``)"
msgstr ""

# c8c5c5f6eb5448539c5b91515609dec9
#: ../../tutorial.rst:436
msgid ""
"**domain:**     The domain that is allowed to read the cookie. (default: "
"current domain)"
msgstr ""

# 6d0ae30c2bdb4082924490a3581927f6
#: ../../tutorial.rst:437
msgid "**path:**       Limit the cookie to a given path (default: ``/``)"
msgstr ""

# 89af9a7789814bf3a3d39831ee47d339
#: ../../tutorial.rst:438
msgid "**secure:**     Limit the cookie to HTTPS connections (default: off)."
msgstr ""

# ef929e1f89ea47b490f269945058f447
#: ../../tutorial.rst:439
msgid ""
"**httponly:**   Prevent client-side javascript to read this cookie (default:"
" off, requires Python 2.6 or newer)."
msgstr ""

# c44dea99790347c3b1411561849c89dd
#: ../../tutorial.rst:441
msgid ""
"If neither `expires` nor `max_age` is set, the cookie expires at the end of "
"the browser session or as soon as the browser window is closed. There are "
"some other gotchas you should consider when using cookies:"
msgstr ""

# 5802e77b9bc94dbe910071affe4e2d2b
#: ../../tutorial.rst:443
msgid "Cookies are limited to 4 KB of text in most browsers."
msgstr ""

# 078f11701bd1466ca37e2bff02db03d2
#: ../../tutorial.rst:444
msgid ""
"Some users configure their browsers to not accept cookies at all. Most "
"search engines ignore cookies too. Make sure that your application still "
"works without cookies."
msgstr ""

# 3e129493ead74cf2adb246bd3f35b3c7
#: ../../tutorial.rst:445
msgid ""
"Cookies are stored at client side and are not encrypted in any way. Whatever"
" you store in a cookie, the user can read it. Worse than that, an attacker "
"might be able to steal a user's cookies through `XSS "
"<http://en.wikipedia.org/wiki/HTTP_cookie#Cookie_theft_and_session_hijacking>`_"
" vulnerabilities on your side. Some viruses are known to read the browser "
"cookies, too. Thus, never store confidential information in cookies."
msgstr ""

# 2d2b28d364fe43f68e5455243f4d6bd9
#: ../../tutorial.rst:446
msgid "Cookies are easily forged by malicious clients. Do not trust cookies."
msgstr ""

# 57e3df9c7fbb4307918abf135b1b408d
#: ../../tutorial.rst:451
msgid "Signed Cookies"
msgstr ""

# 92a3f73e4b3c4de8a7ed7941b2ce366c
#: ../../tutorial.rst:452
msgid ""
"As mentioned above, cookies are easily forged by malicious clients. Bottle "
"can cryptographically sign your cookies to prevent this kind of "
"manipulation. All you have to do is to provide a signature key via the "
"`secret` keyword argument whenever you read or set a cookie and keep that "
"key a secret. As a result, :meth:`Request.get_cookie` will return ``None`` "
"if the cookie is not signed or the signature keys don't match::"
msgstr ""

# e4e66538b103446eaaa6be8545814503
#: ../../tutorial.rst:472
msgid ""
"In addition, Bottle automatically pickles and unpickles any data stored to "
"signed cookies. This allows you to store any pickle-able object (not only "
"strings) to cookies, as long as the pickled data does not exceed the 4 KB "
"limit."
msgstr ""

# beb5c580407247ec9519564408987b5b
#: ../../tutorial.rst:474
msgid ""
"Signed cookies are not encrypted (the client can still see the content) and "
"not copy-protected (the client can restore an old cookie). The main "
"intention is to make pickling and unpickling safe and prevent manipulation, "
"not to store secret information at client side."
msgstr ""

# f81616266e524317b7881b24d9b0b913
#: ../../tutorial.rst:487
msgid "Request Data"
msgstr ""

# f5735cfa714e43e6971a618eb223525f
#: ../../tutorial.rst:489
msgid ""
"Cookies, HTTP header, HTML ``<form>`` fields and other request data is "
"available through the global :data:`request` object. This special object "
"always refers to the *current* request, even in multi-threaded environments "
"where multiple client connections are handled at the same time::"
msgstr ""

# 89159d8092db437ba581dfabbd9373dd
#: ../../tutorial.rst:498
msgid ""
"The :data:`request` object is a subclass of :class:`BaseRequest` and has a "
"very rich API to access data. We only cover the most commonly used features "
"here, but it should be enough to get started."
msgstr ""

# df4a93a9d7534ca1a59cf027011e3090
#: ../../tutorial.rst:503
msgid "Introducing :class:`FormsDict`"
msgstr ""

# 431fe46c72de430a81a899114cbd7b5d
#: ../../tutorial.rst:505
msgid ""
"Bottle uses a special type of dictionary to store form data and cookies. "
":class:`FormsDict` behaves like a normal dictionary, but has some additional"
" features to make your life easier."
msgstr ""

# 398ec974232a4add91ded25202d804fa
#: ../../tutorial.rst:507
msgid ""
"**Attribute access**: All values in the dictionary are also accessible as "
"attributes. These virtual attributes return unicode strings, even if the "
"value is missing or unicode decoding fails. In that case, the string is "
"empty, but still present::"
msgstr ""

# 31053961417647c1999307641ac677b2
#: ../../tutorial.rst:522
msgid ""
"**Multiple values per key:** :class:`FormsDict` is a subclass of "
":class:`MultiDict` and can store more than one value per key. The standard "
"dictionary access methods will only return a single value, but the "
":meth:`~MultiDict.getall` method returns a (possibly empty) list of all "
"values for a specific key::"
msgstr ""

# 63ef53e5110b48f3b386e4817dd43ae1
#: ../../tutorial.rst:527
msgid ""
"**WTForms support:** Some libraries (e.g. `WTForms "
"<http://wtforms.simplecodes.com/>`_) want all-unicode dictionaries as input."
" :meth:`FormsDict.decode` does that for you. It decodes all values and "
"returns a copy of itself, while preserving multiple values per key and all "
"the other features."
msgstr ""

# cae78dee769745038d0e99d7f1962e92
#: ../../tutorial.rst:531
msgid ""
"In **Python 2** all keys and values are byte-strings. If you need unicode, "
"you can call :meth:`FormsDict.getunicode` or fetch values via attribute "
"access. Both methods try to decode the string (default: utf8) and return an "
"empty string if that fails. No need to catch :exc:`UnicodeError`::"
msgstr ""

# 860bf56342f9464cb363e7ceb8d8f191
#: ../../tutorial.rst:538
msgid ""
"In **Python 3** all strings are unicode, but HTTP is a byte-based wire "
"protocol. The server has to decode the byte strings somehow before they are "
"passed to the application. To be on the safe side, WSGI suggests ISO-8859-1 "
"(aka latin1), a reversible single-byte codec that can be re-encoded with a "
"different encoding later. Bottle does that for :meth:`FormsDict.getunicode` "
"and attribute access, but not for the dict-access methods. These return the "
"unchanged values as provided by the server implementation, which is probably"
" not what you want."
msgstr ""

# d1d25ef91b1149e08b56d7eec46bc3b6
#: ../../tutorial.rst:545
msgid ""
"If you need the whole dictionary with correctly decoded values (e.g. for "
"WTForms), you can call :meth:`FormsDict.decode` to get a re-encoded copy."
msgstr ""

# 1f41cf2d2cdd4445873e264035b1442b
#: ../../tutorial.rst:551
msgid ""
"Cookies are small pieces of text stored in the clients browser and sent back"
" to the server with each request. They are useful to keep some state around "
"for more than one request (HTTP itself is stateless), but should not be used"
" for security related stuff. They can be easily forged by the client."
msgstr ""

# e24f4025a9484c5e8029385b83a05f53
#: ../../tutorial.rst:553
msgid ""
"All cookies sent by the client are available through "
":attr:`BaseRequest.cookies` (a :class:`FormsDict`). This example shows a "
"simple cookie-based view counter::"
msgstr ""

# 3a28598cdb314053b4534f8bb55582cb
#: ../../tutorial.rst:563
msgid ""
"The :meth:`BaseRequest.get_cookie` method is a different way do access "
"cookies. It supports decoding :ref:`signed cookies <tutorial-signed-"
"cookies>` as described in a separate section."
msgstr ""

# f213ece9c0d84067854f53077a331dba
#: ../../tutorial.rst:566
msgid "HTTP Headers"
msgstr ""

# 8a8fc6a8d22c4efbaa818329a0cdc607
#: ../../tutorial.rst:568
msgid ""
"All HTTP headers sent by the client (e.g. ``Referer``, ``Agent`` or "
"``Accept-Language``) are stored in a :class:`WSGIHeaderDict` and accessible "
"through the :attr:`BaseRequest.headers` attribute. A :class:`WSGIHeaderDict`"
" is basically a dictionary with case-insensitive keys::"
msgstr ""

# d28b3873034d468d905e90b0405c8f25
#: ../../tutorial.rst:580
msgid "Query Variables"
msgstr ""

# 15eaede90aa64490b333ee269b97e6c7
#: ../../tutorial.rst:582
msgid ""
"The query string (as in ``/forum?id=1&page=5``) is commonly used to transmit"
" a small number of key/value pairs to the server. You can use the "
":attr:`BaseRequest.query` attribute (a :class:`FormsDict`) to access these "
"values and the :attr:`BaseRequest.query_string` attribute to get the whole "
"string."
msgstr ""

# 8afda217e0c1411c93dfb29d25e7b68b
#: ../../tutorial.rst:595
msgid "HTML `<form>` Handling"
msgstr ""

# 47bccfd4c83b4534813d04312a8f44d8
#: ../../tutorial.rst:597
msgid ""
"Let us start from the beginning. In HTML, a typical ``<form>`` looks "
"something like this:"
msgstr ""

# 64d8978da120454982ea5a701336edd4
#: ../../tutorial.rst:607
msgid ""
"The ``action`` attribute specifies the URL that will receive the form data. "
"``method`` defines the HTTP method to use (``GET`` or ``POST``). With "
"``method=\"get\"`` the form values are appended to the URL and available "
"through :attr:`BaseRequest.query` as described above. This is considered "
"insecure and has other limitations, so we use ``method=\"post\"`` here. If "
"in doubt, use ``POST`` forms."
msgstr ""

# f991d9afa38b458e9c90c2ff47e789f4
#: ../../tutorial.rst:609
msgid ""
"Form fields transmitted via ``POST`` are stored in :attr:`BaseRequest.forms`"
" as a :class:`FormsDict`. The server side code may look like this::"
msgstr ""

# 81cff7f4af934d6fa9360ab54da95cb6
#: ../../tutorial.rst:632
msgid ""
"There are several other attributes used to access form data. Some of them "
"combine values from different sources for easier access. The following table"
" should give you a decent overview."
msgstr ""

# 6702069df9974731a7ea60ca75cab0f9
#: ../../tutorial.rst:635
msgid "Attribute"
msgstr ""

# d244efbdf14047919a287b05efa14f67
#: ../../tutorial.rst:635
msgid "GET Form fields"
msgstr ""

# dfc1e30176c84efcb0ae93db03175783
#: ../../tutorial.rst:635
msgid "POST Form fields"
msgstr ""

# 0f1381b897e7406f8b7c9fd4968e52da
#: ../../tutorial.rst:635
msgid "File Uploads"
msgstr ""

# 0ce02ef13e8f46b19a80f42290c2c442
#: ../../tutorial.rst:637
msgid ":attr:`BaseRequest.query`"
msgstr ""

# 7ea570eed5714a27842397402919a1b8
# f866fe599a37442ca560b4f9f52af0dc
# a6d6e8e46e7d478c8a6ad58ac4fd7056
# 1bb36453a3ce4fe49c3f4a77fa7e5bfd
# 2fcf1f61fc1c47a2829eee6461b2c9b7
# 259a134887df4aefa37e401e1f74fcf3
# 5d9e107544124f1189df3569c785a4f9
# be692b7f81ad4459906b76b89aa77cb0
#: ../../tutorial.rst:637 ../../tutorial.rst:638 ../../tutorial.rst:639
#: ../../tutorial.rst:640 ../../tutorial.rst:640 ../../tutorial.rst:641
#: ../../tutorial.rst:642 ../../tutorial.rst:642
msgid "yes"
msgstr ""

# 41fb61904c1c48b49f5d4eb6e5a4317d
# 20d5592e036c4bd2b00bc328ae7ca487
# ba20bb316e5b42c5b1fdd5b30427e8cf
# bd6e97ab7e52496d90715378b0268e1c
# acebe8690063405d8865f974bd2b7189
# 2c649fa972a64390a4b662f23be351d4
# 8af044d64b4a481482686774e23a256a
# 4032074c7e0748528569b583e2e5286b
# 797c2c93982040d7913ec152eaa6349a
# bef53fde1b334d9ab5d5571f37e3f53f
#: ../../tutorial.rst:637 ../../tutorial.rst:637 ../../tutorial.rst:638
#: ../../tutorial.rst:638 ../../tutorial.rst:639 ../../tutorial.rst:639
#: ../../tutorial.rst:640 ../../tutorial.rst:641 ../../tutorial.rst:641
#: ../../tutorial.rst:642
msgid "no"
msgstr ""

# 774116fa45d944548da6b38a82256693
#: ../../tutorial.rst:638
msgid ":attr:`BaseRequest.forms`"
msgstr ""

# 1af3b00479c946e68e966f8e00c2d9fa
#: ../../tutorial.rst:639
msgid ":attr:`BaseRequest.files`"
msgstr ""

# 713441a08c9b42359dd5e70eea1dfb2c
#: ../../tutorial.rst:640
msgid ":attr:`BaseRequest.params`"
msgstr ""

# 210cda782b0c4601b2b1b3e793621ace
#: ../../tutorial.rst:641
msgid ":attr:`BaseRequest.GET`"
msgstr ""

# bb796720e91d48c7a8817cff648e154b
#: ../../tutorial.rst:642
msgid ":attr:`BaseRequest.POST`"
msgstr ""

# c713689f0f9649adbdaed97afc4fc888
#: ../../tutorial.rst:647
msgid "File uploads"
msgstr ""

# f09f90f8cd8a426dbae4c7fb4a8a1544
#: ../../tutorial.rst:649
msgid ""
"To support file uploads, we have to change the ``<form>`` tag a bit. First, "
"we tell the browser to encode the form data in a different way by adding an "
"``enctype=\"multipart/form-data\"`` attribute to the ``<form>`` tag. Then, "
"we add ``<input type=\"file\" />`` tags to allow the user to select a file. "
"Here is an example:"
msgstr ""

# 5621abf2254141d59a63e48e0ff8f2a0
#: ../../tutorial.rst:659
msgid ""
"Bottle stores file uploads in :attr:`BaseRequest.files` as "
":class:`FileUpload` instances, along with some metadata about the upload. "
"Let us assume you just want to save the file to disk::"
msgstr ""

# afd75710819b4c39a70d77987aa39395
#: ../../tutorial.rst:673
msgid ""
":attr:`FileUpload.filename` contains the name of the file on the clients "
"file system, but is cleaned up and normalized to prevent bugs caused by "
"unsupported characters or path segments in the filename. If you need the "
"unmodified name as sent by the client, have a look at "
":attr:`FileUpload.raw_filename`."
msgstr ""

# c413b885489c4cb28d0213b211c9083b
#: ../../tutorial.rst:675
msgid ""
"The :attr:`FileUpload.save` method is highly recommended if you want to "
"store the file to disk. It prevents some common errors (e.g. it does not "
"overwrite existing files unless you tell it to) and stores the file in a "
"memory efficient way. You can access the file object directly via "
":attr:`FileUpload.file`. Just be careful."
msgstr ""

# 7c1b1718d1cb4ac0bedcad349b6e7e9f
#: ../../tutorial.rst:679
msgid "JSON Content"
msgstr ""

# 94dca01a171e406cb291c5f40a246907
#: ../../tutorial.rst:681
msgid ""
"Some JavaScript or REST clients send ``application/json`` content to the "
"server. The :attr:`BaseRequest.json` attribute contains the parsed data "
"structure, if available."
msgstr ""

# b18fe51c7d944a35ac322ca51d760407
#: ../../tutorial.rst:685
msgid "The raw request body"
msgstr ""

# 3c02f3635cd4412e88370791707f1307
#: ../../tutorial.rst:687
msgid ""
"You can access the raw body data as a file-like object via "
":attr:`BaseRequest.body`. This is a :class:`BytesIO` buffer or a temporary "
"file depending on the content length and :attr:`BaseRequest.MEMFILE_MAX` "
"setting. In both cases the body is completely buffered before you can access"
" the attribute. If you expect huge amounts of data and want to get direct "
"unbuffered access to the stream, have a look at ``request['wsgi.input']``."
msgstr ""

# 31e459b302f947c3a11bc4bd8c3130c2
#: ../../tutorial.rst:692
msgid "WSGI Environment"
msgstr ""

# 277b90d681814132b180f82d12dbedea
#: ../../tutorial.rst:694
msgid ""
"Each :class:`BaseRequest` instance wraps a WSGI environment dictionary. The "
"original is stored in :attr:`BaseRequest.environ`, but the request object "
"itself behaves like a dictionary, too. Most of the interesting data is "
"exposed through special methods or attributes, but if you want to access "
"`WSGI environ variables <WSGI specification>`_ directly, you can do so::"
msgstr ""

# cbc4820353de4a8fa7d8093817f8cb58
#: ../../tutorial.rst:712
msgid "Templates"
msgstr ""

# 7f54e3b252594f1296fd078b53278355
#: ../../tutorial.rst:714
msgid ""
"Bottle comes with a fast and powerful built-in template engine called "
":doc:`stpl`. To render a template you can use the :func:`template` function "
"or the :func:`view` decorator. All you have to do is to provide the name of "
"the template and the variables you want to pass to the template as keyword "
"arguments. Here’s a simple example of how to render a template::"
msgstr ""

# 9c995ce0ba9247d998d1daf11889c3d4
#: ../../tutorial.rst:721
msgid ""
"This will load the template file ``hello_template.tpl`` and render it with "
"the ``name`` variable set. Bottle will look for templates in the "
"``./views/`` folder or any folder specified in the ``bottle.TEMPLATE_PATH`` "
"list."
msgstr ""

# 3fb064d060e74fa9b91c7e9019037bcb
#: ../../tutorial.rst:723
msgid ""
"The :func:`view` decorator allows you to return a dictionary with the "
"template variables instead of calling :func:`template`::"
msgstr ""

# 793d0013d90b46688230efac332591c6
#: ../../tutorial.rst:732
msgid "Syntax"
msgstr ""

# 276911f834024512812f74daa82b7b9a
#: ../../tutorial.rst:735
msgid ""
"The template syntax is a very thin layer around the Python language. Its "
"main purpose is to ensure correct indentation of blocks, so you can format "
"your template without worrying about indentation. Follow the link for a full"
" syntax description: :doc:`stpl`"
msgstr ""

# 8b3dfbc242614a39bbbcbd2c7b480650
#: ../../tutorial.rst:737
msgid "Here is an example template::"
msgstr ""

# 9fb13a88ef1e48dabfb9003411f0da05
#: ../../tutorial.rst:748
msgid "Caching"
msgstr ""

# 014c2131d61848819bd5efafc48a7c23
#: ../../tutorial.rst:749
msgid ""
"Templates are cached in memory after compilation. Modifications made to the "
"template files will have no affect until you clear the template cache. Call "
"``bottle.TEMPLATES.clear()`` to do so. Caching is disabled in debug mode."
msgstr ""

# bca0ac7a52cf4ad2be2fd039a319376f
#: ../../tutorial.rst:759
msgid "Plugins"
msgstr ""

# 25be41e29e994bb39b03cca0274c82c4
#: ../../tutorial.rst:763
msgid ""
"Bottle's core features cover most common use-cases, but as a micro-framework"
" it has its limits. This is where \"Plugins\" come into play. Plugins add "
"missing functionality to the framework, integrate third party libraries, or "
"just automate some repetitive work."
msgstr ""

# 8f13e7d3d6ce4e76a84a4960b1cb4d16
#: ../../tutorial.rst:765
msgid ""
"We have a growing :doc:`/plugins/index` and most plugins are designed to be "
"portable and re-usable across applications. The chances are high that your "
"problem has already been solved and a ready-to-use plugin exists. If not, "
"the :doc:`/plugindev` may help you."
msgstr ""

# 0594cbaaa49844da81038387ed1bfa0f
#: ../../tutorial.rst:767
msgid ""
"The effects and APIs of plugins are manifold and depend on the specific "
"plugin. The ``SQLitePlugin`` plugin for example detects callbacks that "
"require a ``db`` keyword argument and creates a fresh database connection "
"object every time the callback is called. This makes it very convenient to "
"use a database::"
msgstr ""

# a54a3ff608494fc4a8746922337e3dbc
#: ../../tutorial.rst:787
msgid ""
"Other plugin may populate the thread-safe :data:`local` object, change "
"details of the :data:`request` object, filter the data returned by the "
"callback or bypass the callback completely. An \"auth\" plugin for example "
"could check for a valid session and return a login page instead of calling "
"the original callback. What happens exactly depends on the plugin."
msgstr ""

# 85df0eb6da384cc69f757bc3bb5e462d
#: ../../tutorial.rst:791
msgid "Application-wide Installation"
msgstr ""

# d0222cf4aa4c4835af86c94d7c0c0589
#: ../../tutorial.rst:793
msgid ""
"Plugins can be installed application-wide or just to some specific routes "
"that need additional functionality. Most plugins can safely be installed to "
"all routes and are smart enough to not add overhead to callbacks that do not"
" need their functionality."
msgstr ""

# 57e02045eb6945f69f6f863fe0953064
#: ../../tutorial.rst:795
msgid ""
"Let us take the ``SQLitePlugin`` plugin for example. It only affects route "
"callbacks that need a database connection. Other routes are left alone. "
"Because of this, we can install the plugin application-wide with no "
"additional overhead."
msgstr ""

# 7195c359c8f94d89b1d0fd93875173b7
#: ../../tutorial.rst:797
msgid ""
"To install a plugin, just call :func:`install` with the plugin as first "
"argument::"
msgstr ""

# 79c5ac9cbe514621842159896ee0ae5d
#: ../../tutorial.rst:802
msgid ""
"The plugin is not applied to the route callbacks yet. This is delayed to "
"make sure no routes are missed. You can install plugins first and add routes"
" later, if you want to. The order of installed plugins is significant, "
"though. If a plugin requires a database connection, you need to install the "
"database plugin first."
msgstr ""

# 76f0442c3c9f48d596a3612707f2b4f1
#: ../../tutorial.rst:806
msgid "Uninstall Plugins"
msgstr ""

# 9e704003eec5447b87efbfdbeb2bde74
#: ../../tutorial.rst:807
msgid ""
"You can use a name, class or instance to :func:`uninstall` a previously "
"installed plugin::"
msgstr ""

# 4f74d521e0c84a759bf77d9eb22a485b
#: ../../tutorial.rst:817
msgid ""
"Plugins can be installed and removed at any time, even at runtime while "
"serving requests. This enables some neat tricks (installing slow debugging "
"or profiling plugins only when needed) but should not be overused. Each time"
" the list of plugins changes, the route cache is flushed and all plugins are"
" re-applied."
msgstr ""

# 40927582b3c84e00bbc2191d16078246
#: ../../tutorial.rst:820
msgid ""
"The module-level :func:`install` and :func:`uninstall` functions affect the "
":ref:`default-app`. To manage plugins for a specific application, use the "
"corresponding methods on the :class:`Bottle` application object."
msgstr ""

# 58c602357cdf4076a0038b3d440bd688
#: ../../tutorial.rst:824
msgid "Route-specific Installation"
msgstr ""

# 8f59747bb8e648fdba1d771c2939cad8
#: ../../tutorial.rst:826
msgid ""
"The ``apply`` parameter of the :func:`route` decorator comes in handy if you"
" want to install plugins to only a small number of routes::"
msgstr ""

# abcb2ceeb0054dc58ef4237a350faf34
#: ../../tutorial.rst:836
msgid "Blacklisting Plugins"
msgstr ""

# b731ed592be14b0d9c004e4a214e3489
#: ../../tutorial.rst:838
msgid ""
"You may want to explicitly disable a plugin for a number of routes. The "
":func:`route` decorator has a ``skip`` parameter for this purpose::"
msgstr ""

# d85ad26d6e3a46d5818f416319d0c5a3
#: ../../tutorial.rst:860
msgid ""
"The ``skip`` parameter accepts a single value or a list of values. You can "
"use a name, class or instance to identify the plugin that is to be skipped. "
"Set ``skip=True`` to skip all plugins at once."
msgstr ""

# b0e92a806c1540a8b226edd15c74a341
#: ../../tutorial.rst:863
msgid "Plugins and Sub-Applications"
msgstr ""

# d94f16ee803544499b013738990cfeb7
#: ../../tutorial.rst:865
msgid ""
"Most plugins are specific to the application they were installed to. "
"Consequently, they should not affect sub-applications mounted with "
":meth:`Bottle.mount`. Here is an example::"
msgstr ""

# 40b102855d834ae1a674b32c75aa31d5
#: ../../tutorial.rst:876
msgid ""
"Whenever you mount an application, Bottle creates a proxy-route on the main-"
"application that forwards all requests to the sub-application. Plugins are "
"disabled for this kind of proxy-route by default. As a result, our "
"(fictional) `WTForms` plugin affects the ``/contact`` route, but does not "
"affect the routes of the ``/blog`` sub-application."
msgstr ""

# 4ae87ecf90a048f990df1510667100b3
#: ../../tutorial.rst:878
msgid ""
"This behavior is intended as a sane default, but can be overridden. The "
"following example re-activates all plugins for a specific proxy-route::"
msgstr ""

# a24c569c2903469eab34c396c43e83e9
#: ../../tutorial.rst:882
msgid ""
"But there is a snag: The plugin sees the whole sub-application as a single "
"route, namely the proxy-route mentioned above. In order to affect each "
"individual route of the sub-application, you have to install the plugin to "
"the mounted application explicitly."
msgstr ""

# 8dbf1a52f32d451784ef4d67fc179b0a
#: ../../tutorial.rst:887
msgid "Development"
msgstr ""

# 8f36ef7efc4246bf9a542080c79eeede
#: ../../tutorial.rst:889
msgid ""
"So you have learned the basics and want to write your own application? Here "
"are some tips that might help you beeing more productive."
msgstr ""

# dd29da73ce5c432d8228bfa0d0d81099
#: ../../tutorial.rst:895
msgid "Default Application"
msgstr ""

# 544a987ceb96442c9ccff5f1e2fe2e4b
#: ../../tutorial.rst:897
msgid ""
"Bottle maintains a global stack of :class:`Bottle` instances and uses the "
"top of the stack as a default for some of the module-level functions and "
"decorators. The :func:`route` decorator, for example, is a shortcut for "
"calling :meth:`Bottle.route` on the default application::"
msgstr ""

# 4e0ba4ae441f4e0281a706abb654d18d
#: ../../tutorial.rst:905
msgid ""
"This is very convenient for small applications and saves you some typing, "
"but also means that, as soon as your module is imported, routes are "
"installed to the global default application. To avoid this kind of import "
"side-effects, Bottle offers a second, more explicit way to build "
"applications::"
msgstr ""

# 9714994da3d94f458ab6ee594a764f3d
#: ../../tutorial.rst:915
msgid ""
"Separating the application object improves re-usability a lot, too. Other "
"developers can safely import the ``app`` object from your module and use "
":meth:`Bottle.mount` to merge applications together."
msgstr ""

# 315dc7ab16da4382841a5dd90d0c731a
#: ../../tutorial.rst:920
msgid ""
"Starting with bottle-0.13 you can use :class:`Bottle` instances as context "
"managers::"
msgstr ""

# e816f442ee374317a4db0354035a741f
#: ../../tutorial.rst:945
msgid "Debug Mode"
msgstr ""

# 1841835c41ef4ab3b775053b920435f0
#: ../../tutorial.rst:947
msgid "During early development, the debug mode can be very helpful."
msgstr ""

# 1e3210c116344bfcb3ecdad6b4df771e
#: ../../tutorial.rst:955
msgid ""
"In this mode, Bottle is much more verbose and provides helpful debugging "
"information whenever an error occurs. It also disables some optimisations "
"that might get in your way and adds some checks that warn you about possible"
" misconfiguration."
msgstr ""

# c024d64f3e44433380ea258a1e92dd53
#: ../../tutorial.rst:957
msgid "Here is an incomplete list of things that change in debug mode:"
msgstr ""

# d51ba513873c4172ad91bfd90ccb2bd4
#: ../../tutorial.rst:959
msgid "The default error page shows a traceback."
msgstr ""

# e6e131c916ed4f609f2da4fee618c82c
#: ../../tutorial.rst:960
msgid "Templates are not cached."
msgstr ""

# 871d27067f994ad8a39c1ca49544ee68
#: ../../tutorial.rst:961
msgid "Plugins are applied immediately."
msgstr ""

# b7d8c5b7008f45c0a038f83728a08df4
#: ../../tutorial.rst:963
msgid "Just make sure not to use the debug mode on a production server."
msgstr ""

# 230a80d407214760b0f52d315277db98
#: ../../tutorial.rst:966
msgid "Auto Reloading"
msgstr ""

# 5490d728bb6146a8935d3472247f547f
#: ../../tutorial.rst:968
msgid ""
"During development, you have to restart the server a lot to test your recent"
" changes. The auto reloader can do this for you. Every time you edit a "
"module file, the reloader restarts the server process and loads the newest "
"version of your code."
msgstr ""

# 70c64c23129b44948cff310d97af3f06
#: ../../tutorial.rst:978
msgid ""
"How it works: the main process will not start a server, but spawn a new "
"child process using the same command line arguments used to start the main "
"process. All module-level code is executed at least twice! Be careful."
msgstr ""

# ec521c28413244ef883d0d26e2689e35
#: ../../tutorial.rst:983
msgid ""
"The child process will have ``os.environ['BOTTLE_CHILD']`` set to ``True`` "
"and start as a normal non-reloading app server. As soon as any of the loaded"
" modules changes, the child process is terminated and re-spawned by the main"
" process. Changes in template files will not trigger a reload. Please use "
"debug mode to deactivate template caching."
msgstr ""

# 090016314dc74f0d9d5c06c11f77f1b4
#: ../../tutorial.rst:989
msgid ""
"The reloading depends on the ability to stop the child process. If you are "
"running on Windows or any other operating system not supporting "
"``signal.SIGINT`` (which raises ``KeyboardInterrupt`` in Python), "
"``signal.SIGTERM`` is used to kill the child. Note that exit handlers and "
"finally clauses, etc., are not executed after a ``SIGTERM``."
msgstr ""

# e9af1d45586f47678186c5e456d8cbd6
#: ../../tutorial.rst:997
msgid "Command Line Interface"
msgstr ""

# b7bb238a6c4940c6ad67a8522e5b64ad
#: ../../tutorial.rst:1001
msgid "Starting with version 0.10 you can use bottle as a command-line tool:"
msgstr ""

# b069a1c2ef7c40d080c59f668bd47ed6
#: ../../tutorial.rst:1021
msgid ""
"The `ADDRESS` field takes an IP address or an IP:PORT pair and defaults to "
"``localhost:8080``. The other parameters should be self-explanatory."
msgstr ""

# df531b1dbca34c6db295549ebe781feb
#: ../../tutorial.rst:1023
msgid ""
"Both plugins and applications are specified via import expressions. These "
"consist of an import path (e.g. ``package.module``) and an expression to be "
"evaluated in the namespace of that module, separated by a colon. See "
":func:`load` for details. Here are some examples:"
msgstr ""

# 2ff1ba34045444f296682d99266c76fc
#: ../../tutorial.rst:1044
msgid "Deployment"
msgstr ""

# 17875cb062b0410295d0c2070a303b46
#: ../../tutorial.rst:1046
msgid ""
"Bottle runs on the built-in `wsgiref WSGIServer "
"<http://docs.python.org/library/wsgiref.html#module-wsgiref.simple_server>`_"
"  by default. This non-threading HTTP server is perfectly fine for "
"development and early production, but may become a performance bottleneck "
"when server load increases."
msgstr ""

# 4c8326eabfd34669bce8c85bd409e9a5
#: ../../tutorial.rst:1048
msgid ""
"The easiest way to increase performance is to install a multi-threaded "
"server library like paste_ or cherrypy_ and tell Bottle to use that instead "
"of the single-threaded server::"
msgstr ""

# 211f847f902344269c0f7414d7944b82
#: ../../tutorial.rst:1052
msgid ""
"This, and many other deployment options are described in a separate article:"
" :doc:`deployment`"
msgstr ""

# 81519fb5f1d7406cb9b6494174640cd1
#: ../../tutorial.rst:1060
msgid "Glossary"
msgstr ""

# 4ae50891b37244f6b923ca21c801242a
#: ../../tutorial.rst:1063
msgid "callback"
msgstr ""

# 76835012ccdd431ab1b60af7cff4e7da
#: ../../tutorial.rst:1065
msgid ""
"Programmer code that is to be called when some external action happens. In "
"the context of web frameworks, the mapping between URL paths and application"
" code is often achieved by specifying a callback function for each URL."
msgstr ""

# f565b2272291413296e44576e5844363
#: ../../tutorial.rst:1069
msgid "decorator"
msgstr ""

# 36051db8397e42e1ab2f41ae9b5cb8f9
#: ../../tutorial.rst:1071
msgid ""
"A function returning another function, usually applied as a function "
"transformation using the ``@decorator`` syntax. See `python documentation "
"for function definition  "
"<http://docs.python.org/reference/compound_stmts.html#function>`_ for more "
"about decorators."
msgstr ""

# 78b63b0f25fa48fdadbc39087d8e88cb
#: ../../tutorial.rst:1072
msgid "environ"
msgstr ""

# abf5b7541b9e44b995bc839d58f02441
#: ../../tutorial.rst:1074
msgid ""
"A structure where information about all documents under the root is saved, "
"and used for cross-referencing.  The environment is pickled after the "
"parsing stage, so that successive runs only need to read and parse new and "
"changed documents."
msgstr ""

# f0ccedaa7176499786f45fd4103a3332
#: ../../tutorial.rst:1078
msgid "handler function"
msgstr ""

# 6a5c6163ec6347f2924b22eba8f34302
#: ../../tutorial.rst:1080
msgid ""
"A function to handle some specific event or situation. In a web framework, "
"the application is developed by attaching a handler function as callback for"
" each specific URL comprising the application."
msgstr ""

# 90e647e99d59401f9213900ed9c012d8
#: ../../tutorial.rst:1083
msgid "source directory"
msgstr ""

# 139a4e596dde491593d07ee7d082143e
#: ../../tutorial.rst:1085
msgid ""
"The directory which, including its subdirectories, contains all source files"
" for one Sphinx project."
msgstr ""
