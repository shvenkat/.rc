snippet preamble "Preamble" b
#!/bin/sh

set -e -u -o pipefail


NAME="$(basename -- "$0")"
PREFIX="$(dirname -- "$0")"
endsnippet


snippet usage "Usage message" b
# Show usage.
# Args: None.
usage () {
    echo "Usage: $NAME [-h|--help] <arg1> ..."
    echo
    echo '<synopsis>'
    echo
    echo '<description>'
    echo
    echo '...'
    echo
}
endsnippet


snippet log "Logging functions" b
# ----------  Logging  -------------------------------------------------------

# Initialize logging by setting global variables.
# Args: None.
init_logger () {
    if [ -t 1 ]; then
        NORMAL="\e[0m"
        BOLD="\e[1m"
        RED="\e[31m"
        YELLOW="\e[33m"
    else
        NORMAL=""
        BOLD=""
        RED=""
        YELLOW=""
    fi
}

# Output formatted error message _and exit_.
# Args:
#   $@: Messages.
error () {
    env echo -e "${RED}ERROR${NORMAL}${BOLD}   [$NAME]  $*${NORMAL}"
    exit 1
}

# Output formatted warning messages.
# Args:
#   $@: Messages.
warn () {
    env echo -e "${YELLOW}WARNING${NORMAL}${BOLD} [$NAME]  $*${NORMAL}"
}

# Output formatted informational messages.
# Args:
#   $@: Messages.
info () {
    env echo -e "${BOLD}INFO    [$NAME]  $*${NORMAL}"
}

# Output formatted debug messages.
# Args:
#   $@: Messages.
debug () {
    env echo -e "${NORMAL}DEBUG   [$NAME]  $*"
}

# Run a command, logging its output. If an error is encountered, output an error message and exit.
# Args:
#   $@: Command and arguments to be run.
run () {
    debug "Running: $* (in $(pwd))."
    ("$@" 2>&1 | while IFS='' read -r line; do echo "        $line"; done) \
        || error "$1 command failed."
}
endsnippet


snippet main "Argument parsing and main program logic" b
# ----------  main  ----------------------------------------------------------

init_logger

# Check usage.
if [ $# -eq 1 ] && ([ "$1" = "-h" ] || [ "$1" = "--help" ]); then
    usage
    exit 0
fi
if [ $# -ne 2 ]; then
    usage
    exit 1
fi

# Parse options.
while [ $# -gt 0 ]; do
    case "$1" in
        --foo)
            FOO=yes
            ;;
        -b|--bar)
            shift
            if [ "${1#-}" != "$1" ];
                usage
                error "The --bar parameter must be followed by a value."
            fi
            BAR="$1"
            ;;
        --)
            shift
            break
            ;;
        --*)
            usage
            exit 1
            ;;
        *)
            break
            ;;
    esac
    shift
done

# Parse non-option arguments.
arg1="$1"
arg2="$2"
endsnippet
