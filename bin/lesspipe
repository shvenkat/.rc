#! /bin/sh

set -e -u -o pipefail

# An input preprocessor for `less` that handles syntax highlighting, decompression and un-archiving.
#
# Author: Shiv <shiv@alum.mit.edu>
# Based on:
# * src-hilite-lesspipe.sh distributed with GNU source-highlight, and
# * lesspipe/lessfile by Behan Webster <behanw@pobox.com>.
# License: GPLv2
#
# USAGE: Run this program with no arguments to get usage info.


NAME="$(basename "$0")"
ABS_PATH="$(cd "$(dirname -- "$0")"; pwd)"/$NAME


# Write to stderr.
stderr () {
    echo "$@" 1>&2
}


# Print usage. Do not exit.
usage () {
    stderr 'To use lesspipe:'
    stderr '1. Place lesspipe in a directory in your PATH.'
    stderr '2. Add the following line to your shell initialization script (e.g. .bashrc, .zshrc),' \
        'replacing SHELL with the name of your shell: sh, bash, zsh, csh, or tcsh.'
    stderr '    eval $(lesspipe --init SHELL)'
}


# Write formatted error messages to stderr.
error () {
    stderr "[${NAME}] Error: $*."
}


# Emit shell code to set the environment variable LESSOPEN to allow `less` to call this program.
# Args:
#   $1: Name of the shell being initialized, e.g. zsh, bash, ksh, tcsh, csh.
# Output: Shell code to set LESSOPEN.
emit_shell_init_code () {
    case "$1" in
        csh|tcsh)
            echo "setenv LESSOPEN \"||- $ABS_PATH %s\";"
            ;;
        sh|bash|zsh|dash|ksh)
            echo "export LESSOPEN=\"||- $ABS_PATH %s\";"
            ;;
        *)
            error "Unknown shell \'$1\'."
            exit 1
            ;;
    esac
}


# Call source-highlight with an inline style definition.
# Args:
#   $1: Source path.
#   (Optional) Additional arguments to source-highlight.
# Output: Source text with ANSI color escape codes.
highlight () {
    input=$1
    shift
    style_file="$HOME/.config/source-highlight/esc.style"
    if [ -r "$style_file" ]; then
        source-highlight "$@" --failsafe --out-format esc --style-file "$style_file" --input "$input"
    else
        source-highlight "$@" --failsafe --out-format esc --input "$input"
    fi
}


# Preprocess the input, applying the appropriate transformation based on file type. Handles syntax
# highlighting, decompression and archive content listing.
# Args:
#   $1: Input file. '-' if input appears on standard input. Otherwise an _existing_ file path.
# Output: Preprocessed input, which may be empty.
preprocess () {
    # Print shell code to set LESSOPEN.
    # Syntax highlight source code. Delegate to `lesspipe` for compressed and archive files.
    case "$1" in
        -)
            # Input passed via stdin. Filetype cannot be inferred from filename or extension.
            cat
            ;;
        *ChangeLog|*changelog)
            highlight "$1" --lang-def=changelog.lang
            ;;
        *Makefile|*makefile)
            highlight "$1" --lang-def=makefile.lang
            ;;
        *.tar|*.tgz|*.gz|*.bz2|*.xz)
            # Delegate to `lesspipe` if available.
            if which lesspipe >/dev/null; then
                lesspipe "$1"
            else
                echo "Install lesspipe to view files of this type."
            fi
            ;;
        *)
            # Assume the input file is source code.
            highlight "$1" --infer-lang
            ;;
    esac
}


# ----------  main  ----------------------------------------------------------

if [ $# -eq 0 ]; then
    usage
    exit 1
elif [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    # NOTE: Assumes '-h' and '--help' are not filenames.
    usage
    exit 0
elif [ "$1" = "--init" ] && [ -n "$2" ]; then
    emit_shell_init_code "$2"
    exit 0
elif [ $# -gt 1 ]; then
    usage
    exit 1
else
    # If the input file cannot be read, terminate.
    if [ "$1" != "-" ] && [ ! -r "$1" ]; then
        echo "File $1 not found or not readable."
        exit 1
    fi
    preprocess "$1"
    exit 0
fi
