#!/bin/sh

set -e -u -o pipefail


NAME="$(basename -- "$0")"
PREFIX="$(dirname -- "$0")"
OSTYPE="$(uname -s | tr '[:upper:]' '[:lower:]')"
PREFS_JS="$PREFIX/prefs.js"


# Show usage.
usage () {
    echo "Usage: $NAME [-h|--help]"
    echo "    Merges $PREFS_JS with Firefox config."
}


# ----------  Logging  -------------------------------------------------------

# Initialize logging by setting global variables.
if [ -t 1 ]; then
    NORMAL="\e[0m"
    BOLD="\e[1m"
    RED="\e[31m"
    YELLOW="\e[33m"
else
    NORMAL=""
    BOLD=""
    RED=""
    YELLOW=""
fi

# Output formatted error message _and exit_.
# Args:
#   $@: Messages.
error () {
    env echo -e "${RED}ERROR${NORMAL}${BOLD}   [$NAME]  $*${NORMAL}"
    exit 1
}

# Output formatted warning messages.
# Args:
#   $@: Messages.
warn () {
    env echo -e "${YELLOW}WARNING${NORMAL}${BOLD} [$NAME]  $*${NORMAL}"
}

# Output formatted informational messages.
# Args:
#   $@: Messages.
info () {
    env echo -e "${BOLD}INFO    [$NAME]  $*${NORMAL}"
}

# Run a command, logging its output. If an error is encountered, output an error message and exit.
# Args:
#   $@: Command and arguments to be run.
run () {
    info "Running: $* (in $(pwd))."
    ("$@" 2>&1 | while IFS='' read -r line; do echo "        $line"; done) \
        || error " command failed."
}


# ----------  main  ----------------------------------------------------------

# Check usage.
if [ $# -eq 1 ] && ([ "$1" = "-h" ] || [ "$1" = "--help" ]); then
    usage
    exit 0
fi
if [ $# -gt 0 ]; then
    usage
    exit 1
fi

# OS-specific prereqs.
case "$OSTYPE" in
    linux*)
        error "Unsupported OS: $OSTYPE"
        ;;
    darwin*)
        # Exit if firefox is running.
        if pgrep -U "$(id -u)" -x firefox >/dev/null 2>&1; then
            error "Cannot install preferences because Firefox is running."
        fi
        # Set paths.
        profiles_dir="${HOME}/Library/Application Support/Firefox/Profiles"
        download_dir="${HOME}/Downloads"
        ;;
    *)
        error "Unsupported OS: $OSTYPE"
        ;;
esac

# Merge prefs.
default_profile="$(find "$profiles_dir" -mindepth 1 -maxdepth 1 -type d -name '*.default')"
if [ ! -d "$default_profile" ]; then
    error "Cannot locate a default Firefox profile in $profiles_dir."
fi
firefox_prefs_js="${default_profile}/prefs.js"
info "Merging preferences to $firefox_prefs_js."
cat < "$PREFS_JS" | sed -e "s#DOWNLOAD_DIR#${download_dir}#" >> "$firefox_prefs_js"
