# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2009-2015, Marcel Hellkamp
# This file is distributed under the same license as the Bottle package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: bottle\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-01-22 16:45-0200\n"
"PO-Revision-Date: 2015-01-22 19:17+0000\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: Portuguese (Brazil) (http://www.transifex.com/projects/p/bottle/language/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

# 6e6f1890868c4088befa08b2bf3c09d1
#: ../../api.rst:3
msgid "API Reference"
msgstr ""

# 1555a0201e0545f7a83fc15d8626b5de
#: ../../api.rst:10
msgid ""
"This is a mostly auto-generated API. If you are new to bottle, you might "
"find the narrative :doc:`tutorial` more helpful."
msgstr ""

# 08754aebe6d846ea96468045c8b869a0
#: ../../api.rst:17
msgid "Module Contents"
msgstr ""

# 5302aebd29084991b73434573b348161
#: ../../api.rst:19
msgid "The module defines several functions, constants, and an exception."
msgstr ""

# a1318af3cc6341808c79ce8ae5ad9bc6
#: ../../../bottle.pydocstring of bottle.debug:1
msgid ""
"Change the debug level. There is only one debug level supported at the "
"moment."
msgstr ""

# 29009b75d3d243a9951d43e6e6cec603
#: ../../../bottle.pydocstring of bottle.run:1
msgid ""
"Start a server instance. This method blocks until the server terminates."
msgstr ""

# d7574f1e690e40779a504c0da4b49ec1
#: ../../../bottle.pydocstring of bottle.run:3
msgid ""
"WSGI application or target string supported by :func:`load_app`. (default: "
":func:`default_app`)"
msgstr ""

# 4f4605bb1b5f41a190af6b58eca56e92
#: ../../../bottle.pydocstring of bottle.run:5
msgid ""
"Server adapter to use. See :data:`server_names` keys for valid names or pass"
" a :class:`ServerAdapter` subclass. (default: `wsgiref`)"
msgstr ""

# afa4779b3b5b45ccadba9807f47137ee
#: ../../../bottle.pydocstring of bottle.run:8
msgid ""
"Server address to bind to. Pass ``0.0.0.0`` to listens on all interfaces "
"including the external one. (default: 127.0.0.1)"
msgstr ""

# 0d9126dd90c349c2aa4dd4667dfa3c80
#: ../../../bottle.pydocstring of bottle.run:10
msgid ""
"Server port to bind to. Values below 1024 require root privileges. (default:"
" 8080)"
msgstr ""

# 6142219b8ae3456c87d1e9b1bc3a2aaf
#: ../../../bottle.pydocstring of bottle.run:12
msgid "Start auto-reloading server? (default: False)"
msgstr ""

# 5ab298b46aa54ad58d4b4326eea3258f
#: ../../../bottle.pydocstring of bottle.run:13
msgid "Auto-reloader interval in seconds (default: 1)"
msgstr ""

# 8821747925654642bd04a7c9d2f9f7f3
#: ../../../bottle.pydocstring of bottle.run:14
msgid "Suppress output to stdout and stderr? (default: False)"
msgstr ""

# 3dbfb217bc3d484face0d7520f5fdf5f
#: ../../../bottle.pydocstring of bottle.run:15
msgid "Options passed to the server adapter."
msgstr ""

# 3bf21c520f5143d8867b769a73b7e1e3
#: ../../../bottle.pydocstring of bottle.load:1
msgid "Import a module or fetch an object from a module."
msgstr ""

# be72344a676c42b69ed2b8f7271efb71
#: ../../../bottle.pydocstring of bottle.load:3
msgid "``package.module`` returns `module` as a module object."
msgstr ""

# 47f1b57d89954810931003e5f5ee464b
#: ../../../bottle.pydocstring of bottle.load:4
msgid "``pack.mod:name`` returns the module variable `name` from `pack.mod`."
msgstr ""

# df39e9866a094edb85ebb9c06f048220
#: ../../../bottle.pydocstring of bottle.load:5
msgid "``pack.mod:func()`` calls `pack.mod.func()` and returns the result."
msgstr ""

# 902d77f1a0bc4e48b13e574905f1b05e
#: ../../../bottle.pydocstring of bottle.load:7
msgid ""
"The last form accepts not only function calls, but any type of expression. "
"Keyword arguments passed to this function are available as local variables. "
"Example: ``import_string('re:compile(x)', x='[a-z]')``"
msgstr ""

# 561dce83224d49f4ba800390bf3de91c
#: ../../../bottle.pydocstring of bottle.load_app:1
msgid ""
"Load a bottle application from a module and make sure that the import does "
"not affect the current default application, but returns a separate "
"application object. See :func:`load` for the target parameter."
msgstr ""

# 60c30ba8932547c3a60d1800c94dd5f7
# 4671fdf2ebd94882bbd784e5ae3cb701
#: ../../../bottle.pydocstring of bottle.request:1 ../../../bottle.pydocstring
#: of bottle.request:1
msgid ""
"A thread-safe instance of :class:`LocalRequest`. If accessed from within a "
"request callback, this instance always refers to the *current* request (even"
" on a multithreaded server)."
msgstr ""

# 872bf1ee18254cc0a6277cc0984e8ce0
#: ../../../bottle.pydocstring of bottle.response:1
msgid ""
"A thread-safe instance of :class:`LocalResponse`. It is used to change the "
"HTTP response for the *current* request."
msgstr ""

# a49428f08e864c05b0e3fc1dfd0ad3d7
#: ../../../bottle.pydocstring of bottle.HTTP_CODES:1
msgid ""
"A dict to map HTTP status codes (e.g. 404) to phrases (e.g. 'Not Found')"
msgstr ""

# 5710371914e5487591145fcee2dfeda3
#: ../../api.rst:38
msgid ""
"Return the current :ref:`default-app`. Actually, these are callable "
"instances of :class:`AppStack` and implement a stack-like API."
msgstr ""

# bf357e3b4acb493ca1155df94fb46080
#: ../../api.rst:42
msgid "Routing"
msgstr ""

# b1c7697eeee24d6ca83ca2b6a80ad2f6
#: ../../api.rst:44
msgid ""
"Bottle maintains a stack of :class:`Bottle` instances (see :func:`app` and "
":class:`AppStack`) and uses the top of the stack as a *default application* "
"for some of the module-level functions and decorators."
msgstr ""

# 75e0d14b9fb44da7b890abc146ba5bc6
#: ../../api.rst:54
msgid ""
"Decorator to install a route to the current default application. See "
":meth:`Bottle.route` for details."
msgstr ""

# 14821620d48d4383ac39b31c3ba1b436
#: ../../api.rst:59
msgid ""
"Decorator to install an error handler to the current default application. "
"See :meth:`Bottle.error` for details."
msgstr ""

# b0da533bd7f74371ad4fefdd4313e066
#: ../../api.rst:63
msgid "WSGI and HTTP Utilities"
msgstr ""

# 854edb2260744c4fa52c37fbf3980442
#: ../../../bottle.pydocstring of bottle.parse_date:1
msgid "Parse rfc1123, rfc850 and asctime timestamps and return UTC epoch."
msgstr ""

# b8f1c325d3644e6485590e25988d2077
#: ../../../bottle.pydocstring of bottle.parse_auth:1
msgid ""
"Parse rfc2617 HTTP authentication header string (basic) and return "
"(user,pass) tuple or None"
msgstr ""

# bd7f80d76a754cbbbe977d2eec833f86
#: ../../../bottle.pydocstring of bottle.cookie_encode:1
msgid "Encode and sign a pickle-able object. Return a (byte) string"
msgstr ""

# 335ed0a39e054e76882f16135764add2
#: ../../../bottle.pydocstring of bottle.cookie_decode:1
msgid "Verify and decode an encoded string. Return an object or None."
msgstr ""

# 680421ad57ae4dd2954f24ba9c48720e
#: ../../../bottle.pydocstring of bottle.cookie_is_encoded:1
msgid "Return True if the argument looks like a encoded cookie."
msgstr ""

# 325f0b3353a54b708f617183ac0fbb93
#: ../../../bottle.pydocstring of bottle.yieldroutes:1
msgid ""
"Return a generator for routes that match the signature (name, args) of the "
"func parameter. This may yield more than one route if the function takes "
"optional keyword arguments. The output is best described by example::"
msgstr ""

# 1b294467fd7a4e1fbbb3e19af423f30a
#: ../../../bottle.pydocstring of bottle.path_shift:1
msgid "Shift path fragments from PATH_INFO to SCRIPT_NAME and vice versa."
msgstr ""

# e23f456fcd844151b572849d1687fd29
#: ../../../bottle.pydocstring of bottle.path_shift:3
msgid "The modified paths."
msgstr ""

# d9f39844f4414125a2adea55c76f9ab1
#: ../../../bottle.pydocstring of bottle.path_shift:4
msgid "The SCRIPT_NAME path."
msgstr ""

# bd1620f37b1545e982175ba24df5cfe1
#: ../../../bottle.pydocstring of bottle.path_shift:5
msgid "The PATH_INFO path."
msgstr ""

# 0f9266e833cc414bbf3c8b4124a16003
#: ../../../bottle.pydocstring of bottle.path_shift:6
msgid ""
"The number of path fragments to shift. May be negative to change the shift "
"direction. (default: 1)"
msgstr ""

# 678a6ae1672f4c0d88325bbe43e83f30
#: ../../api.rst:81
msgid "Data Structures"
msgstr ""

# 7279d06962464074b2d1ba61a55b93ad
#: ../../../bottle.pydocstring of bottle.MultiDict:1
msgid ""
"This dict stores multiple values per key, but behaves exactly like a normal "
"dict in that it returns only the newest value for any given key. There are "
"special methods available to access the full list of values."
msgstr ""

# 332b43160ab04318ae0088aa8c371f4c
#: ../../../bottle.pydocstring of bottle.MultiDict.get:1
msgid "Return the most recent value for a key."
msgstr ""

# 78ed37185b8b45968763ac4772324ea5
#: ../../../bottle.pydocstring of bottle.MultiDict.get:3
msgid ""
"The default value to be returned if the key is not present or the type "
"conversion fails."
msgstr ""

# 039280bb6e3548a88f83e39320cfc416
#: ../../../bottle.pydocstring of bottle.MultiDict.get:5
msgid "An index for the list of available values."
msgstr ""

# 47e2d932db294dd9b57d1ebeb7d797a7
#: ../../../bottle.pydocstring of bottle.MultiDict.get:6
msgid ""
"If defined, this callable is used to cast the value into a specific type. "
"Exception are suppressed and result in the default value to be returned."
msgstr ""

# fef50b5f3e4d407897944209ff13e6e1
#: ../../../bottle.pydocstring of bottle.MultiDict.append:1
msgid "Add a new value to the list of values for this key."
msgstr ""

# 32b71ea024ad4c3dae6ddaa04353a545
#: ../../../bottle.pydocstring of bottle.MultiDict.replace:1
msgid "Replace the list of values with a single value."
msgstr ""

# b1bab1a284c04ad0a120d6a6c050c375
# b3656606d5a946b3bbf249abe36f0509
#: ../../../bottle.pydocstring of bottle.MultiDict.getall:1
#: ../../../bottle.pydocstring of bottle.MultiDict.getlist:1
msgid "Return a (possibly empty) list of values for a key."
msgstr ""

# 62b99ce921744dcaa91fc81bed6300a8
#: ../../../bottle.pydocstring of bottle.MultiDict.getone:1
msgid "Aliases for WTForms to mimic other multi-dict APIs (Django)"
msgstr ""

# 3bd7637823c647c188852631285e6656
#: ../../../bottle.pydocstring of bottle.HeaderDict:1
msgid ""
"A case-insensitive version of :class:`MultiDict` that defaults to replace "
"the old value instead of appending it."
msgstr ""

# 332b1d91c2f840aea478b587ae369b34
#: ../../../bottle.pydocstring of bottle.FormsDict:1
msgid ""
"This :class:`MultiDict` subclass is used to store request form data. "
"Additionally to the normal dict-like item access methods (which return "
"unmodified data as native strings), this container also supports attribute-"
"like access to its values. Attributes are automatically de- or recoded to "
"match :attr:`input_encoding` (default: 'utf8'). Missing attributes default "
"to an empty string."
msgstr ""

# cbb7dae08e98470696e48c345f403f05
#: ../../../bottle.pydocstring of bottle.FormsDict.input_encoding:1
msgid "Encoding used for attribute values."
msgstr ""

# 3bd9b27c66624040aa7843e87236b754
#: ../../../bottle.pydocstring of bottle.FormsDict.recode_unicode:1
msgid ""
"If true (default), unicode strings are first encoded with `latin1` and then "
"decoded to match :attr:`input_encoding`."
msgstr ""

# 11f9df2634ee4a87ae7731021a0ff43a
#: ../../../bottle.pydocstring of bottle.FormsDict.decode:1
msgid ""
"Returns a copy with all keys and values de- or recoded to match "
":attr:`input_encoding`. Some libraries (e.g. WTForms) want a unicode "
"dictionary."
msgstr ""

# ddbfa2ebd1b64213acc046c12095e3a8
#: ../../../bottle.pydocstring of bottle.FormsDict.getunicode:1
msgid "Return the value as a unicode string, or the default."
msgstr ""

# b621b20fa5834ffd81c6d3b4735d8d88
#: ../../../bottle.pydocstring of bottle.WSGIHeaderDict:1
msgid ""
"This dict-like class wraps a WSGI environ dict and provides convenient "
"access to HTTP_* fields. Keys and values are native strings (2.x bytes or "
"3.x unicode) and keys are case-insensitive. If the WSGI environment contains"
" non-native string values, these are de- or encoded using a lossless "
"'latin1' character set."
msgstr ""

# 87a92fe6b7f94bf6b3597e2a7c6e88b7
#: ../../../bottle.pydocstring of bottle.WSGIHeaderDict:7
msgid ""
"The API will remain stable even on changes to the relevant PEPs. Currently "
"PEP 333, 444 and 3333 are supported. (PEP 444 is the only one that uses non-"
"native strings.)"
msgstr ""

# d23f7140fb494f1b954b80fd5981f784
#: ../../../bottle.pydocstring of bottle.WSGIHeaderDict.cgikeys:1
msgid "List of keys that do not have a ``HTTP_`` prefix."
msgstr ""

# 9b4e21107d094d7aadcf3c7782cd7301
#: ../../../bottle.pydocstring of bottle.WSGIHeaderDict.raw:1
msgid "Return the header value as is (may be bytes or unicode)."
msgstr ""

# a856ad085fa14e608dd7996cde192d15
#: ../../../bottle.pydocstring of bottle.AppStack:1
msgid "A stack-like list. Calling it returns the head of the stack."
msgstr ""

# 8dd7a416957746c5b1ec44b6948ee5c5
#: ../../api.rst:100
msgid "Return the current default application and remove it from the stack."
msgstr ""

# 60baa898a97a414a858d741f43fa475e
#: ../../../bottle.pydocstring of bottle.AppStack.push:1
msgid "Add a new :class:`Bottle` instance to the stack"
msgstr ""

# efd9ddd7626e4866a05f586f60c0ff5b
#: ../../../bottle.pydocstring of bottle.ResourceManager:1
msgid ""
"This class manages a list of search paths and helps to find and open "
"application-bound resources (files)."
msgstr ""

# eab412f7ded54862952fee98a36b07a4
#: ../../../bottle.pydocstring of bottle.ResourceManager:4
msgid "default value for :meth:`add_path` calls."
msgstr ""

# 42290c6719d7482b90feb3f184a6b8d2
#: ../../../bottle.pydocstring of bottle.ResourceManager:5
msgid "callable used to open resources."
msgstr ""

# 9184e835b69744978fcfa59bdda4fd0d
#: ../../../bottle.pydocstring of bottle.ResourceManager:6
msgid "controls which lookups are cached. One of 'all', 'found' or 'none'."
msgstr ""

# 63ff63e617d14cf5b599ae3daf160471
#: ../../../bottle.pydocstring of bottle.ResourceManager.path:1
msgid "A list of search paths. See :meth:`add_path` for details."
msgstr ""

# 15dfb2a406d24b6eb081ef38ce7e0e37
#: ../../../bottle.pydocstring of bottle.ResourceManager.cache:1
msgid "A cache for resolved paths. ``res.cache.clear()`` clears the cache."
msgstr ""

# f5344d03c3f54f498dd1fb9e99311439
#: ../../../bottle.pydocstring of bottle.ResourceManager.add_path:1
msgid ""
"Add a new path to the list of search paths. Return False if the path does "
"not exist."
msgstr ""

# b18b16c1b915494983d7a409c6681620
#: ../../../bottle.pydocstring of bottle.ResourceManager.add_path:4
msgid ""
"The new search path. Relative paths are turned into an absolute and "
"normalized form. If the path looks like a file (not ending in `/`), the "
"filename is stripped off."
msgstr ""

# 2d12fbb7606443e6b5d741cfc9eabecc
#: ../../../bottle.pydocstring of bottle.ResourceManager.add_path:7
msgid ""
"Path used to absolutize relative search paths. Defaults to :attr:`base` "
"which defaults to ``os.getcwd()``."
msgstr ""

# ee02bee8b77447b6926989b78c3d613b
#: ../../../bottle.pydocstring of bottle.ResourceManager.add_path:9
msgid ""
"Position within the list of search paths. Defaults to last index (appends to"
" the list)."
msgstr ""

# bccbc7e3f7534a78b9b1accf4cd9fa25
#: ../../../bottle.pydocstring of bottle.ResourceManager.add_path:12
msgid ""
"The `base` parameter makes it easy to reference files installed along with a"
" python module or package::"
msgstr ""

# c892658142f842dc959ad96ccddb9fbe
#: ../../../bottle.pydocstring of bottle.ResourceManager.lookup:1
msgid "Search for a resource and return an absolute file path, or `None`."
msgstr ""

# becb5d6094e9486897e491e36c1e3560
#: ../../../bottle.pydocstring of bottle.ResourceManager.lookup:3
msgid ""
"The :attr:`path` list is searched in order. The first match is returend. "
"Symlinks are followed. The result is cached to speed up future lookups."
msgstr ""

# 1677f80130084b4e9467f43f3d7d4188
#: ../../../bottle.pydocstring of bottle.ResourceManager.open:1
msgid "Find a resource and return a file object, or raise IOError."
msgstr ""

# 158fe9a3639b4970aa7789ecadbed596
#: ../../../bottle.pydocstring of bottle.FileUpload.file:1
msgid "Open file(-like) object (BytesIO buffer or temporary file)"
msgstr ""

# 5a1b03b86526493a8b7bcbf7eb62f922
#: ../../../bottle.pydocstring of bottle.FileUpload.name:1
msgid "Name of the upload form field"
msgstr ""

# 939c81bb9e2741ab85233b8eb59edd55
#: ../../../bottle.pydocstring of bottle.FileUpload.raw_filename:1
msgid "Raw filename as sent by the client (may contain unsafe characters)"
msgstr ""

# b061dc9a587f4a128ccebd2a0a2d0c1e
#: ../../../bottle.pydocstring of bottle.FileUpload.headers:1
msgid "A :class:`HeaderDict` with additional headers (e.g. content-type)"
msgstr ""

# 97b67366c01f4896a4cb519439430184
# b0c53ccc72a04ed68d8f53633005986e
#: ../../../bottle.pydocstring of bottle.FileUpload.content_type:1
#: ../../../bottle.pydocstring of bottle.BaseResponse.content_type:1
msgid "Current value of the 'Content-Type' header."
msgstr ""

# c81bf8a096134919b0f9d666e0f38b13
# 2c67facb603b43f09c832e02466be9b7
#: ../../../bottle.pydocstring of bottle.FileUpload.content_length:1
#: ../../../bottle.pydocstring of bottle.BaseResponse.content_length:1
msgid "Current value of the 'Content-Length' header."
msgstr ""

# 86e8a674418349aea54553ede16eb819
#: ../../../bottle.pydocstring of bottle.FileUpload.filename:1
msgid ""
"Name of the file on the client file system, but normalized to ensure file "
"system compatibility. An empty filename is returned as 'empty'."
msgstr ""

# d167702a191149faabe7a852f4894401
#: ../../../bottle.pydocstring of bottle.FileUpload.filename:4
msgid ""
"Only ASCII letters, digits, dashes, underscores and dots are allowed in the "
"final filename. Accents are removed, if possible. Whitespace is replaced by "
"a single dash. Leading or tailing dots or dashes are removed. The filename "
"is limited to 255 characters."
msgstr ""

# 3bd2181f702a4267b113127206683b3b
#: ../../../bottle.pydocstring of bottle.FileUpload.save:1
msgid ""
"Save file to disk or copy its content to an open file(-like) object. If "
"*destination* is a directory, :attr:`filename` is added to the path. "
"Existing files are not overwritten by default (IOError)."
msgstr ""

# 32fe556fda8347feba81515537de15ca
#: ../../../bottle.pydocstring of bottle.FileUpload.save:5
msgid "File path, directory or file(-like) object."
msgstr ""

# cc4d403f23264d698811ba6a8d33ac72
#: ../../../bottle.pydocstring of bottle.FileUpload.save:6
msgid "If True, replace existing files. (default: False)"
msgstr ""

# aa61856ac4f5426c8c019bbe7f648c9f
#: ../../../bottle.pydocstring of bottle.FileUpload.save:7
msgid "Bytes to read at a time. (default: 64kb)"
msgstr ""

# 29b63851e1864ca0a33899294b941c99
#: ../../api.rst:109
msgid "Exceptions"
msgstr ""

# 6e163262f34b422e83b251fb6c36e10f
#: ../../../bottle.pydocstring of bottle.BottleException:1
msgid "A base class for exceptions used by bottle."
msgstr ""

# 58e87dab98e946bcb2b22d57fac849cb
#: ../../api.rst:117
msgid "The :class:`Bottle` Class"
msgstr ""

# cd6d1ed2f92145adbebfd440e76a38e0
#: ../../../bottle.pydocstring of bottle.Bottle:1
msgid ""
"Each Bottle object represents a single, distinct web application and "
"consists of routes, callbacks, plugins, resources and configuration. "
"Instances are callable WSGI applications."
msgstr ""

# ad8e01ad09bf45c09f47524bf5712c89
#: ../../../bottle.pydocstring of bottle.Bottle:5
msgid ""
"If true (default), handle all exceptions. Turn off to let debugging "
"middleware handle exceptions."
msgstr ""

# be4cfbf92c834eb496fee4378c9b654f
#: ../../../bottle.pydocstring of bottle.Bottle.config:1
msgid "A :class:`ConfigDict` for app specific configuration."
msgstr ""

# 943c669538f947ebb508a9c6275b8826
#: ../../../bottle.pydocstring of bottle.Bottle.resources:1
msgid "A :class:`ResourceManager` for application files"
msgstr ""

# 2ea2a5042a094a40ae1b06724d1b1cf9
#: ../../../bottle.pydocstring of bottle.Bottle.catchall:1
msgid "If true, most exceptions are caught and returned as :exc:`HTTPError`"
msgstr ""

# a5992fe1c37448b591f9accd2df26178
#: ../../../bottle.pydocstring of bottle.Bottle.add_hook:1
msgid "Attach a callback to a hook. Three hooks are currently implemented:"
msgstr ""

# b1c25725010c41988006f85869393c85
#: ../../../bottle.pydocstring of bottle.Bottle.add_hook:4
msgid "before_request"
msgstr ""

# 23bda4671530451da9810b459c6bb465
#: ../../../bottle.pydocstring of bottle.Bottle.add_hook:4
msgid ""
"Executed once before each request. The request context is available, but no "
"routing has happened yet."
msgstr ""

# 3a8fcf7790874f179f661aa100d2f4cf
#: ../../../bottle.pydocstring of bottle.Bottle.add_hook:6
msgid "after_request"
msgstr ""

# 002d9ee625f746e08d7f040b8c78619f
#: ../../../bottle.pydocstring of bottle.Bottle.add_hook:7
msgid "Executed once after each request regardless of its outcome."
msgstr ""

# 0e850b67de90456da8f882422d042a98
#: ../../../bottle.pydocstring of bottle.Bottle.add_hook:8
msgid "app_reset"
msgstr ""

# 10fa5238397e4f80a217fc762ea4561d
#: ../../../bottle.pydocstring of bottle.Bottle.add_hook:9
msgid "Called whenever :meth:`Bottle.reset` is called."
msgstr ""

# 956c85989abc4bcba9e968a3919f419f
#: ../../../bottle.pydocstring of bottle.Bottle.remove_hook:1
msgid "Remove a callback from a hook."
msgstr ""

# 07b66f5038064422947c9ec9f61cc002
#: ../../../bottle.pydocstring of bottle.Bottle.trigger_hook:1
msgid "Trigger a hook and return a list of results."
msgstr ""

# 173a4decfa414251ae35daf7579b28fa
#: ../../../bottle.pydocstring of bottle.Bottle.hook:1
msgid ""
"Return a decorator that attaches a callback to a hook. See :meth:`add_hook` "
"for details."
msgstr ""

# 2c44be04d6384cea9921a7580f49bd9e
#: ../../../bottle.pydocstring of bottle.Bottle.mount:1
msgid ""
"Mount an application (:class:`Bottle` or plain WSGI) to a specific URL "
"prefix. Example::"
msgstr ""

# ea34ccfb3d2542779ad5efcf51306bf2
#: ../../../bottle.pydocstring of bottle.Bottle.mount:6
msgid ""
"path prefix or `mount-point`. If it ends in a slash, that slash is "
"mandatory."
msgstr ""

# cde929a6d4bb42d6aa8987bee536ea69
#: ../../../bottle.pydocstring of bottle.Bottle.mount:8
msgid "an instance of :class:`Bottle` or a WSGI application."
msgstr ""

# d2230da7b83944f08e4c319e99500a49
#: ../../../bottle.pydocstring of bottle.Bottle.mount:10
msgid "All other parameters are passed to the underlying :meth:`route` call."
msgstr ""

# a857bad1f0e64f568190ca94195fa516
#: ../../../bottle.pydocstring of bottle.Bottle.merge:1
msgid ""
"Merge the routes of another :class:`Bottle` application or a list of "
":class:`Route` objects into this application. The routes keep their 'owner',"
" meaning that the :data:`Route.app` attribute is not changed."
msgstr ""

# 8b323545238c4c7391e4e6932746bb3b
#: ../../../bottle.pydocstring of bottle.Bottle.install:1
msgid ""
"Add a plugin to the list of plugins and prepare it for being applied to all "
"routes of this application. A plugin may be a simple decorator or an object "
"that implements the :class:`Plugin` API."
msgstr ""

# 60ebb9a4a6914093813f839ddccdf62a
#: ../../../bottle.pydocstring of bottle.Bottle.uninstall:1
msgid ""
"Uninstall plugins. Pass an instance to remove a specific plugin, a type "
"object to remove all plugins that match that type, a string to remove all "
"plugins with a matching ``name`` attribute or ``True`` to remove all "
"plugins. Return the list of removed plugins."
msgstr ""

# cd607eb3f6e44615905ded8adb97b6db
#: ../../../bottle.pydocstring of bottle.Bottle.reset:1
msgid ""
"Reset all routes (force plugins to be re-applied) and clear all caches. If "
"an ID or route object is given, only that specific route is affected."
msgstr ""

# 702c4a2d252f4a9eb9d6366189cc53ca
#: ../../../bottle.pydocstring of bottle.Bottle.close:1
msgid "Close the application and all installed plugins."
msgstr ""

# 77637ff70804460c860a6eb31676031c
#: ../../../bottle.pydocstring of bottle.Bottle.run:1
msgid "Calls :func:`run` with the same parameters."
msgstr ""

# 2ba5548d2b344a6f9d9d9e1b0fd5815b
#: ../../../bottle.pydocstring of bottle.Bottle.match:1
msgid ""
"Search for a matching route and return a (:class:`Route` , urlargs) tuple. "
"The second value is a dictionary with parameters extracted from the URL. "
"Raise :exc:`HTTPError` (404/405) on a non-match."
msgstr ""

# e414e0c9d58043bba4b914dbfee77215
#: ../../../bottle.pydocstring of bottle.Bottle.get_url:1
msgid "Return a string that matches a named route"
msgstr ""

# 536433380c5845018425b928a5a6a382
#: ../../../bottle.pydocstring of bottle.Bottle.add_route:1
msgid "Add a route object, but do not change the :data:`Route.app` attribute."
msgstr ""

# 1de8bb1c833d41f2a70f3f54decb19e7
#: ../../../bottle.pydocstring of bottle.Bottle.route:1
msgid "A decorator to bind a function to a request URL. Example::"
msgstr ""

# c2876a4a016f4e6bbebdbd881e5ee946
#: ../../../bottle.pydocstring of bottle.Bottle.route:7
msgid ""
"The ``:name`` part is a wildcard. See :class:`Router` for syntax details."
msgstr ""

# f70c2bea86824b62b40f5cb9b29b2b51
#: ../../../bottle.pydocstring of bottle.Bottle.route:10
msgid ""
"Request path or a list of paths to listen to. If no path is specified, it is"
" automatically generated from the signature of the function."
msgstr ""

# 2aab456e96d847b78a8aecafa2ec9998
#: ../../../bottle.pydocstring of bottle.Bottle.route:13
msgid ""
"HTTP method (`GET`, `POST`, `PUT`, ...) or a list of methods to listen to. "
"(default: `GET`)"
msgstr ""

# f0581275d3344cc498b0507572f025be
#: ../../../bottle.pydocstring of bottle.Bottle.route:15
msgid ""
"An optional shortcut to avoid the decorator syntax. ``route(..., "
"callback=func)`` equals ``route(...)(func)``"
msgstr ""

# 14a237dd50f9451f9d1e7b4f562eba46
#: ../../../bottle.pydocstring of bottle.Bottle.route:17
msgid "The name for this route. (default: None)"
msgstr ""

# b340da124931450e8cc9c5cb3196a35b
#: ../../../bottle.pydocstring of bottle.Bottle.route:18
msgid ""
"A decorator or plugin or a list of plugins. These are applied to the route "
"callback in addition to installed plugins."
msgstr ""

# b23d6dfc18c44024bb9183ddb35c08b0
#: ../../../bottle.pydocstring of bottle.Bottle.route:20
msgid ""
"A list of plugins, plugin classes or names. Matching plugins are not "
"installed to this route. ``True`` skips all."
msgstr ""

# 21adffa2774b4d828d445071ef4f7559
#: ../../../bottle.pydocstring of bottle.Bottle.route:23
msgid ""
"Any additional keyword arguments are stored as route-specific configuration "
"and passed to plugins (see :meth:`Plugin.apply`)."
msgstr ""

# f0079d8ffa1146fb892fe508e56f80a1
#: ../../../bottle.pydocstring of bottle.Bottle.get:1
msgid "Equals :meth:`route`."
msgstr ""

# 3b1c2781d0bb465dae22de6e23c77961
#: ../../../bottle.pydocstring of bottle.Bottle.post:1
msgid "Equals :meth:`route` with a ``POST`` method parameter."
msgstr ""

# 93a85e83030d4d8ea7e36af79e9e95e9
#: ../../../bottle.pydocstring of bottle.Bottle.put:1
msgid "Equals :meth:`route` with a ``PUT`` method parameter."
msgstr ""

# b096417ed4f44002883cebff4f1e9a14
#: ../../../bottle.pydocstring of bottle.Bottle.delete:1
msgid "Equals :meth:`route` with a ``DELETE`` method parameter."
msgstr ""

# 20d912e01583408ca731ee4aa38a913b
#: ../../../bottle.pydocstring of bottle.Bottle.patch:1
msgid "Equals :meth:`route` with a ``PATCH`` method parameter."
msgstr ""

# c334ba452db74d9399d0aa2c4d7aaf75
#: ../../../bottle.pydocstring of bottle.Bottle.error:1
msgid "Decorator: Register an output handler for a HTTP error code"
msgstr ""

# 75438b26765a4e1ab5f64c729251a320
#: ../../../bottle.pydocstring of bottle.Bottle.wsgi:1
msgid "The bottle WSGI-interface."
msgstr ""

# fe9fedfbcd16458a9b554dd1a2e34997
#: ../../../bottle.pydocstring of bottle.Route:1
msgid ""
"This class wraps a route callback along with route specific metadata and "
"configuration and applies Plugins on demand. It is also responsible for "
"turing an URL path rule into a regular expression usable by the Router."
msgstr ""

# 9496b769285146f8a6219b2c2dfcd100
#: ../../../bottle.pydocstring of bottle.Route.app:1
msgid "The application this route is installed to."
msgstr ""

# 6dc89226b6d041ef8e1902dd292c8400
#: ../../../bottle.pydocstring of bottle.Route.rule:1
msgid "The path-rule string (e.g. ``/wiki/<page>``)."
msgstr ""

# b6d1303f19094eb9bd5d6063f8b66191
#: ../../../bottle.pydocstring of bottle.Route.method:1
msgid "The HTTP method as a string (e.g. ``GET``)."
msgstr ""

# f7f54d28b9794e37a416c59468e49c4f
#: ../../../bottle.pydocstring of bottle.Route.callback:1
msgid ""
"The original callback with no plugins applied. Useful for introspection."
msgstr ""

# a3b9236a9ec146208651cf9f4478d8ff
#: ../../../bottle.pydocstring of bottle.Route.name:1
msgid "The name of the route (if specified) or ``None``."
msgstr ""

# 4590866d52f94166af42d76c8103a2cc
#: ../../../bottle.pydocstring of bottle.Route.plugins:1
msgid "A list of route-specific plugins (see :meth:`Bottle.route`)."
msgstr ""

# a1121c61945841c59f337077fdfe7a14
#: ../../../bottle.pydocstring of bottle.Route.skiplist:1
msgid ""
"A list of plugins to not apply to this route (see :meth:`Bottle.route`)."
msgstr ""

# a4f07bf1ab554cc99a8dbcd891a416fe
#: ../../../bottle.pydocstring of bottle.Route.config:1
msgid ""
"Additional keyword arguments passed to the :meth:`Bottle.route` decorator "
"are stored in this dictionary. Used for route-specific plugin configuration "
"and meta-data."
msgstr ""

# 1e97056b218c4432844f28bab35ae4b9
#: ../../../bottle.pydocstring of bottle.Route.call:1
msgid ""
"The route callback with all plugins applied. This property is created on "
"demand and then cached to speed up subsequent requests."
msgstr ""

# e54a7a3f6c6b41f68b1f7f6749dcca25
#: ../../../bottle.pydocstring of bottle.Route.reset:1
msgid ""
"Forget any cached values. The next time :attr:`call` is accessed, all "
"plugins are re-applied."
msgstr ""

# 4d664586c1c54559864fdcb9d9c081ca
#: ../../../bottle.pydocstring of bottle.Route.prepare:1
msgid "Do all on-demand work immediately (useful for debugging)."
msgstr ""

# 0b7d6fdbf70e41eb9d807c1d8baab4fb
#: ../../../bottle.pydocstring of bottle.Route.all_plugins:1
msgid "Yield all Plugins affecting this route."
msgstr ""

# 41a13375a15b4b2b90dcbc8bfaad95f9
#: ../../../bottle.pydocstring of bottle.Route.get_undecorated_callback:1
msgid ""
"Return the callback. If the callback is a decorated function, try to recover"
" the original function."
msgstr ""

# 5d85fbf2b65c477681c1154b5e753c48
#: ../../../bottle.pydocstring of bottle.Route.get_callback_args:1
msgid ""
"Return a list of argument names the callback (most likely) accepts as "
"keyword arguments. If the callback is a decorated function, try to recover "
"the original function before inspection."
msgstr ""

# 24807d5c0dbc41608e25506fc42055be
#: ../../../bottle.pydocstring of bottle.Route.get_config:1
msgid ""
"Lookup a config field and return its value, first checking the route.config,"
" then route.app.config."
msgstr ""

# 0980ef7f913f41ab8e9a9f24efd8434f
#: ../../api.rst:127
msgid "The :class:`Request` Object"
msgstr ""

# 19d62d8700724bd59715f54aa2ab9611
#: ../../api.rst:129
msgid ""
"The :class:`Request` class wraps a WSGI environment and provides helpful "
"methods to parse and access form data, cookies, file uploads and other "
"metadata. Most of the attributes are read-only."
msgstr ""

# d19980104b38454694e02c26f91aa043
#: ../../../bottle.pydocstring of bottle.BaseRequest:1
msgid ""
"A wrapper for WSGI environment dictionaries that adds a lot of convenient "
"access methods and properties. Most of them are read-only."
msgstr ""

# 18a8359c3e234b309c7ca9a0ed691b31
#: ../../../bottle.pydocstring of bottle.BaseRequest:4
msgid ""
"Adding new attributes to a request actually adds them to the environ "
"dictionary (as 'bottle.request.ext.<name>'). This is the recommended way to "
"store and access request-specific data."
msgstr ""

# e7418bd103e64768805719f615287ef9
#: ../../../bottle.pydocstring of bottle.BaseRequest.MEMFILE_MAX:1
msgid "Maximum size of memory buffer for :attr:`body` in bytes."
msgstr ""

# 38309eda596944a38fdc410951288b06
#: ../../../bottle.pydocstring of bottle.BaseRequest.environ:1
msgid ""
"The wrapped WSGI environ dictionary. This is the only real attribute. All "
"other attributes actually are read-only properties."
msgstr ""

# 2e4b925fb03a4d64b7c29542102de1b1
#: ../../../bottle.pydocstring of bottle.BaseRequest.app:1
msgid "Bottle application handling this request."
msgstr ""

# 187f069ff1a54530a3dfc83db5812f4a
#: ../../../bottle.pydocstring of bottle.BaseRequest.route:1
msgid "The bottle :class:`Route` object that matches this request."
msgstr ""

# 5b6bc6e7728446d8b311c3d56721ea71
#: ../../../bottle.pydocstring of bottle.BaseRequest.url_args:1
msgid "The arguments extracted from the URL."
msgstr ""

# b7806e2ab3f2487e96d49efe6c212774
#: ../../../bottle.pydocstring of bottle.BaseRequest.path:1
msgid ""
"The value of ``PATH_INFO`` with exactly one prefixed slash (to fix broken "
"clients and avoid the \"empty path\" edge case)."
msgstr ""

# e73b404238eb4dc9aee6c6f6d1a35831
#: ../../../bottle.pydocstring of bottle.BaseRequest.method:1
msgid "The ``REQUEST_METHOD`` value as an uppercase string."
msgstr ""

# 797b9664dddb4bccbabf2e8c52e337f5
#: ../../../bottle.pydocstring of bottle.BaseRequest.headers:1
msgid ""
"A :class:`WSGIHeaderDict` that provides case-insensitive access to HTTP "
"request headers."
msgstr ""

# 894e12d96b894446944764bd144f1252
#: ../../../bottle.pydocstring of bottle.BaseRequest.get_header:1
msgid "Return the value of a request header, or a given default value."
msgstr ""

# 197de294ab4d4ec6b5cb6d6aecd12e18
#: ../../../bottle.pydocstring of bottle.BaseRequest.cookies:1
msgid ""
"Cookies parsed into a :class:`FormsDict`. Signed cookies are NOT decoded. "
"Use :meth:`get_cookie` if you expect signed cookies."
msgstr ""

# 4d35bcb791c144d49800854c27cf24c7
#: ../../../bottle.pydocstring of bottle.BaseRequest.get_cookie:1
msgid ""
"Return the content of a cookie. To read a `Signed Cookie`, the `secret` must"
" match the one used to create the cookie (see "
":meth:`BaseResponse.set_cookie`). If anything goes wrong (missing cookie or "
"wrong signature), return a default value."
msgstr ""

# 52e45424a11d4f3f89bce680502de547
#: ../../../bottle.pydocstring of bottle.BaseRequest.query:1
msgid ""
"The :attr:`query_string` parsed into a :class:`FormsDict`. These values are "
"sometimes called \"URL arguments\" or \"GET parameters\", but not to be "
"confused with \"URL wildcards\" as they are provided by the :class:`Router`."
msgstr ""

# 9c8b68d027324f33a775f04bd9e8188c
#: ../../../bottle.pydocstring of bottle.BaseRequest.forms:1
msgid ""
"Form values parsed from an `url-encoded` or `multipart/form-data` encoded "
"POST or PUT request body. The result is returned as a :class:`FormsDict`. "
"All keys and values are strings. File uploads are stored separately in "
":attr:`files`."
msgstr ""

# c166a5f18f5247db8b9c0d775286dcc9
#: ../../../bottle.pydocstring of bottle.BaseRequest.params:1
msgid ""
"A :class:`FormsDict` with the combined values of :attr:`query` and "
":attr:`forms`. File uploads are stored in :attr:`files`."
msgstr ""

# c3218dd21f1a470b9c634574e7d79dd8
#: ../../../bottle.pydocstring of bottle.BaseRequest.files:1
msgid ""
"File uploads parsed from `multipart/form-data` encoded POST or PUT request "
"body. The values are instances of :class:`FileUpload`."
msgstr ""

# 133c3a0b8f5b497abe29c8ffd3bf7636
#: ../../../bottle.pydocstring of bottle.BaseRequest.json:1
msgid ""
"If the ``Content-Type`` header is ``application/json``, this property holds "
"the parsed content of the request body. Only requests smaller than "
":attr:`MEMFILE_MAX` are processed to avoid memory exhaustion."
msgstr ""

# 5729e49a74ca4056b6c96004e54ef01c
#: ../../../bottle.pydocstring of bottle.BaseRequest.body:1
msgid ""
"The HTTP request body as a seek-able file-like object. Depending on "
":attr:`MEMFILE_MAX`, this is either a temporary file or a "
":class:`io.BytesIO` instance. Accessing this property for the first time "
"reads and replaces the ``wsgi.input`` environ variable. Subsequent accesses "
"just do a `seek(0)` on the file object."
msgstr ""

# 74e2ad2eccdd450384fc0c58100b5cb0
#: ../../../bottle.pydocstring of bottle.BaseRequest.chunked:1
msgid "True if Chunked transfer encoding was."
msgstr ""

# 26d8d8a46b6c4e97bc658a075b0cc543
#: ../../../bottle.pydocstring of bottle.BaseRequest.GET:1
msgid "An alias for :attr:`query`."
msgstr ""

# dc2407aa502d47bdbdccbbe987b1378e
#: ../../../bottle.pydocstring of bottle.BaseRequest.POST:1
msgid ""
"The values of :attr:`forms` and :attr:`files` combined into a single "
":class:`FormsDict`. Values are either strings (form values) or instances of "
":class:`cgi.FieldStorage` (file uploads)."
msgstr ""

# 83fefa837c9c4686b48843452d36edb4
#: ../../../bottle.pydocstring of bottle.BaseRequest.url:1
msgid ""
"The full request URI including hostname and scheme. If your app lives behind"
" a reverse proxy or load balancer and you get confusing results, make sure "
"that the ``X-Forwarded-Host`` header is set correctly."
msgstr ""

# 3102cd1f3daf4d2988ed3eb332d6a0e4
#: ../../../bottle.pydocstring of bottle.BaseRequest.urlparts:1
msgid ""
"The :attr:`url` string as an :class:`urlparse.SplitResult` tuple. The tuple "
"contains (scheme, host, path, query_string and fragment), but the fragment "
"is always empty because it is not visible to the server."
msgstr ""

# dbb2fe1dd13e447c8d6a6051f77c2108
#: ../../../bottle.pydocstring of bottle.BaseRequest.fullpath:1
msgid "Request path including :attr:`script_name` (if present)."
msgstr ""

# f8dfb3c32d344539aeb9beaafb1b8f2b
#: ../../../bottle.pydocstring of bottle.BaseRequest.query_string:1
msgid ""
"The raw :attr:`query` part of the URL (everything in between ``?`` and "
"``#``) as a string."
msgstr ""

# 17c227b3922a4c0f83221abad09faed2
#: ../../../bottle.pydocstring of bottle.BaseRequest.script_name:1
msgid ""
"The initial portion of the URL's `path` that was removed by a higher level "
"(server or routing middleware) before the application was called. This "
"script path is returned with leading and tailing slashes."
msgstr ""

# 541f3baa8331490eb8cfa0c82b984f6c
#: ../../../bottle.pydocstring of bottle.BaseRequest.path_shift:2
msgid "Shift path segments from :attr:`path` to :attr:`script_name` and"
msgstr ""

# d25eb7998ea74a1599f0dae0dc366998
#: ../../../bottle.pydocstring of bottle.BaseRequest.path_shift:2
msgid "vice versa."
msgstr ""

# b30d3e677515491ab3293f6699c209b8
#: ../../../bottle.pydocstring of bottle.BaseRequest.path_shift:4
msgid ""
"The number of path segments to shift. May be negative to change the shift "
"direction. (default: 1)"
msgstr ""

# c2eefebcc51d4fd8b8928ff5c123b991
#: ../../../bottle.pydocstring of bottle.BaseRequest.content_length:1
msgid ""
"The request body length as an integer. The client is responsible to set this"
" header. Otherwise, the real length of the body is unknown and -1 is "
"returned. In this case, :attr:`body` will be empty."
msgstr ""

# ec1bc61d62594a18be4d3bcb6b232e26
#: ../../../bottle.pydocstring of bottle.BaseRequest.content_type:1
msgid "The Content-Type header as a lowercase-string (default: empty)."
msgstr ""

# 8b06d6e30c244cb4899e0f18c78b2382
#: ../../../bottle.pydocstring of bottle.BaseRequest.is_xhr:1
msgid ""
"True if the request was triggered by a XMLHttpRequest. This only works with "
"JavaScript libraries that support the `X-Requested-With` header (most of the"
" popular libraries do)."
msgstr ""

# 70694af67bdf4a94afcd795bacf9603c
#: ../../../bottle.pydocstring of bottle.BaseRequest.is_ajax:1
msgid "Alias for :attr:`is_xhr`. \"Ajax\" is not the right term."
msgstr ""

# f01c1a9c1f464f4887ef6f7df9e2290c
#: ../../../bottle.pydocstring of bottle.BaseRequest.auth:1
msgid ""
"HTTP authentication data as a (user, password) tuple. This implementation "
"currently supports basic (not digest) authentication only. If the "
"authentication happened at a higher level (e.g. in the front web-server or a"
" middleware), the password field is None, but the user field is looked up "
"from the ``REMOTE_USER`` environ variable. On any errors, None is returned."
msgstr ""

# c5e697b8c7bb4f0eb374a0290c4f9ebc
#: ../../../bottle.pydocstring of bottle.BaseRequest.remote_route:1
msgid ""
"A list of all IPs that were involved in this request, starting with the "
"client IP and followed by zero or more proxies. This does only work if all "
"proxies support the ```X-Forwarded-For`` header. Note that this information "
"can be forged by malicious clients."
msgstr ""

# d318ecc14e1c4b55aa0b37fa905402b5
#: ../../../bottle.pydocstring of bottle.BaseRequest.remote_addr:1
msgid ""
"The client IP as a string. Note that this information can be forged by "
"malicious clients."
msgstr ""

# 37e2bc129f4344f69f1638242c7a8b6a
#: ../../../bottle.pydocstring of bottle.BaseRequest.copy:1
msgid "Return a new :class:`Request` with a shallow :attr:`environ` copy."
msgstr ""

# 783b014fc4d9467fabc53d1002ee8b0c
#: ../../api.rst:137
msgid ""
"The module-level :data:`bottle.request` is a proxy object (implemented in "
":class:`LocalRequest`) and always refers to the `current` request, or in "
"other words, the request that is currently processed by the request handler "
"in the current thread. This `thread locality` ensures that you can safely "
"use a global instance in a multi-threaded environment."
msgstr ""

# 6b8fd96f9d864365a306ae8bd7540100
#: ../../../bottle.pydocstring of bottle.LocalRequest:1
msgid ""
"A thread-local subclass of :class:`BaseRequest` with a different set of "
"attributes for each thread. There is usually only one global instance of "
"this class (:data:`request`). If accessed during a request/response cycle, "
"this instance always refers to the *current* request (even on a "
"multithreaded server)."
msgstr ""

# cf28da2200b647d4ab95aa6856da4728
#: ../../../bottle.pydocstring of bottle.LocalRequest.bind:1
msgid "Wrap a WSGI environ dictionary."
msgstr ""

# 5679e84f729c4e18bfdf24e733568a11
# 8997f48eff01470fac183253d5668646
#: ../../../bottle.pydocstring of bottle.LocalRequest.environ:1
#: ../../../bottle.pydocstring of bottle.LocalResponse.body:1
msgid "Thread-local property"
msgstr ""

# 75ce75442a1849a6961057ae8c44496d
#: ../../api.rst:146
msgid "The :class:`Response` Object"
msgstr ""

# 6c9d0b58bc484258903b66671ef44ae5
#: ../../api.rst:148
msgid ""
"The :class:`Response` class stores the HTTP status code as well as headers "
"and cookies that are to be sent to the client. Similar to "
":data:`bottle.request` there is a thread-local :data:`bottle.response` "
"instance that can be used to adjust the `current` response. Moreover, you "
"can instantiate :class:`Response` and return it from your request handler. "
"In this case, the custom instance overrules the headers and cookies defined "
"in the global one."
msgstr ""

# 7b311ec1097f445eb6f51526e6c7f5da
#: ../../../bottle.pydocstring of bottle.BaseResponse:1
msgid "Storage class for a response body as well as headers and cookies."
msgstr ""

# a7c70b3a5dac48d8ad9838aad181b030
#: ../../../bottle.pydocstring of bottle.BaseResponse:3
msgid ""
"This class does support dict-like case-insensitive item-access to headers, "
"but is NOT a dict. Most notably, iterating over a response yields parts of "
"the body and not the headers."
msgstr ""

# f0da442123914c9dbf92ad14ae33d4eb
#: ../../../bottle.pydocstring of bottle.BaseResponse:7
msgid "The response body as one of the supported types."
msgstr ""

# 416bec80b1d74581a3545300500cb6bb
#: ../../../bottle.pydocstring of bottle.BaseResponse:8
msgid ""
"Either an HTTP status code (e.g. 200) or a status line including the reason "
"phrase (e.g. '200 OK')."
msgstr ""

# 9741c81708e54f45b5f4296099ed3c7c
#: ../../../bottle.pydocstring of bottle.BaseResponse:10
msgid "A dictionary or a list of name-value pairs."
msgstr ""

# ed9265c1eff3455982736fa271f6c57b
#: ../../../bottle.pydocstring of bottle.BaseResponse:12
msgid ""
"Additional keyword arguments are added to the list of headers. Underscores "
"in the header name are replaced with dashes."
msgstr ""

# 9f60d016c3fd49b993c2ad913296e8d5
#: ../../../bottle.pydocstring of bottle.BaseResponse.copy:1
msgid "Returns a copy of self."
msgstr ""

# f0a115a90f514b559e06913753b31a47
#: ../../../bottle.pydocstring of bottle.BaseResponse.status_line:1
msgid "The HTTP status line as a string (e.g. ``404 Not Found``)."
msgstr ""

# 300fd4f340f84ba2bf8b58c1a3811ee3
#: ../../../bottle.pydocstring of bottle.BaseResponse.status_code:1
msgid "The HTTP status code as an integer (e.g. 404)."
msgstr ""

# 2687af7f1a74451fa2e805d3a497abf9
#: ../../../bottle.pydocstring of bottle.BaseResponse.status:1
msgid ""
"A writeable property to change the HTTP response status. It accepts either a"
" numeric code (100-999) or a string with a custom reason phrase (e.g. \"404 "
"Brain not found\"). Both :data:`status_line` and :data:`status_code` are "
"updated accordingly. The return value is always a status string."
msgstr ""

# 7d3b920436fc4ea888edda05418d2cd6
#: ../../../bottle.pydocstring of bottle.BaseResponse.headers:1
msgid ""
"An instance of :class:`HeaderDict`, a case-insensitive dict-like view on the"
" response headers."
msgstr ""

# d0336baf7c5c465fb6b2d0180ed1f6d6
#: ../../../bottle.pydocstring of bottle.BaseResponse.get_header:1
msgid ""
"Return the value of a previously defined header. If there is no header with "
"that name, return a default value."
msgstr ""

# 751f59807fe2454c9e97b746a3360bb2
#: ../../../bottle.pydocstring of bottle.BaseResponse.set_header:1
msgid ""
"Create a new response header, replacing any previously defined headers with "
"the same name."
msgstr ""

# a0c7a2c72f6347e8adeb4d0f5fd24faa
#: ../../../bottle.pydocstring of bottle.BaseResponse.add_header:1
msgid "Add an additional response header, not removing duplicates."
msgstr ""

# 9d7fd718414748458df1b74c6857acdc
#: ../../../bottle.pydocstring of bottle.BaseResponse.iter_headers:1
msgid ""
"Yield (header, value) tuples, skipping headers that are not allowed with the"
" current response status code."
msgstr ""

# f51925b096d74eea9c09bb31b4c606c0
#: ../../../bottle.pydocstring of bottle.BaseResponse.headerlist:1
msgid "WSGI conform list of (header, value) tuples."
msgstr ""

# af0d5936cbec4fd0a284572c85183310
#: ../../../bottle.pydocstring of bottle.BaseResponse.expires:1
msgid "Current value of the 'Expires' header."
msgstr ""

# 449fbc42ab534eb0949ce0aca16f870c
#: ../../../bottle.pydocstring of bottle.BaseResponse.charset:1
msgid ""
"Return the charset specified in the content-type header (default: utf8)."
msgstr ""

# 278d88c571884e0598ca0a74f28dd821
#: ../../../bottle.pydocstring of bottle.BaseResponse.set_cookie:1
msgid ""
"Create a new cookie or replace an old one. If the `secret` parameter is set,"
" create a `Signed Cookie` (described below)."
msgstr ""

# 077c6a333f0e42efba2cb3228d4aaa3f
#: ../../../bottle.pydocstring of bottle.BaseResponse.set_cookie:4
msgid "the name of the cookie."
msgstr ""

# 95fff6916b3742529b998bfad25901b9
#: ../../../bottle.pydocstring of bottle.BaseResponse.set_cookie:5
msgid "the value of the cookie."
msgstr ""

# 1f916b38374f4269b6f992d6275a4967
#: ../../../bottle.pydocstring of bottle.BaseResponse.set_cookie:6
msgid "a signature key required for signed cookies."
msgstr ""

# 1b7001808bf74513a78985bc1f11df4e
#: ../../../bottle.pydocstring of bottle.BaseResponse.set_cookie:8
msgid ""
"Additionally, this method accepts all RFC 2109 attributes that are supported"
" by :class:`cookie.Morsel`, including:"
msgstr ""

# 6e8c2187ceac4782973deeea64614a3f
#: ../../../bottle.pydocstring of bottle.BaseResponse.set_cookie:11
msgid "maximum age in seconds. (default: None)"
msgstr ""

# ea81288c9154463fb426ec239f1457a2
#: ../../../bottle.pydocstring of bottle.BaseResponse.set_cookie:12
msgid "a datetime object or UNIX timestamp. (default: None)"
msgstr ""

# 7e970671af6b41259e67cd1820b8d4c6
#: ../../../bottle.pydocstring of bottle.BaseResponse.set_cookie:13
msgid ""
"the domain that is allowed to read the cookie. (default: current domain)"
msgstr ""

# 59170752bd8d4e04ad7a14ea30f3567c
#: ../../../bottle.pydocstring of bottle.BaseResponse.set_cookie:15
msgid "limits the cookie to a given path (default: current path)"
msgstr ""

# 0f14ef439f6b4048ac8d32f0d9d560f4
#: ../../../bottle.pydocstring of bottle.BaseResponse.set_cookie:16
msgid "limit the cookie to HTTPS connections (default: off)."
msgstr ""

# 3407b4cd122349b48187d582ee2e93b6
#: ../../../bottle.pydocstring of bottle.BaseResponse.set_cookie:17
msgid ""
"prevents client-side javascript to read this cookie (default: off, requires "
"Python 2.6 or newer)."
msgstr ""

# 88323d4474ec4ee395198d179a98b3c2
#: ../../../bottle.pydocstring of bottle.BaseResponse.set_cookie:20
msgid ""
"If neither `expires` nor `max_age` is set (default), the cookie will expire "
"at the end of the browser session (as soon as the browser window is closed)."
msgstr ""

# 41ae534497c14b5c819b3a29957b1f46
#: ../../../bottle.pydocstring of bottle.BaseResponse.set_cookie:24
msgid ""
"Signed cookies may store any pickle-able object and are cryptographically "
"signed to prevent manipulation. Keep in mind that cookies are limited to 4kb"
" in most browsers."
msgstr ""

# d3b5a35447304a4b84b04271b31f53c0
#: ../../../bottle.pydocstring of bottle.BaseResponse.set_cookie:28
msgid ""
"Warning: Signed cookies are not encrypted (the client can still see the "
"content) and not copy-protected (the client can restore an old cookie). The "
"main intention is to make pickling and unpickling save, not to store secret "
"information at client side."
msgstr ""

# 8ad6fc2228e24dc0bb3bccec97aca868
#: ../../../bottle.pydocstring of bottle.BaseResponse.delete_cookie:1
msgid ""
"Delete a cookie. Be sure to use the same `domain` and `path` settings as "
"used to create the cookie."
msgstr ""

# 3c8efcb26aae498895ca82f18d273289
#: ../../../bottle.pydocstring of bottle.LocalResponse:1
msgid ""
"A thread-local subclass of :class:`BaseResponse` with a different set of "
"attributes for each thread. There is usually only one global instance of "
"this class (:data:`response`). Its attributes are used to build the HTTP "
"response at the end of the request/response cycle."
msgstr ""

# 5dfc033e72814ef09ff2ddc3c1efc61e
#: ../../api.rst:160
msgid ""
"The following two classes can be raised as an exception. The most noticeable"
" difference is that bottle invokes error handlers for :class:`HTTPError`, "
"but not for :class:`HTTPResponse` or other response types."
msgstr ""

# ffeecbbe08304a34bb1ec7d3852a9111
#: ../../api.rst:172
msgid "Templates"
msgstr ""

# a144e4a4c5ff45229f0a509a139fac43
#: ../../api.rst:174
msgid ""
"All template engines supported by :mod:`bottle` implement the "
":class:`BaseTemplate` API. This way it is possible to switch and mix "
"template engines without changing the application code at all."
msgstr ""

# 17f903442d074fae882eb6261ed71467
#: ../../../bottle.pydocstring of bottle.BaseTemplate:1
msgid "Base class and minimal API for template adapters"
msgstr ""

# b8d514a59d964465bafa31d0097c90b9
#: ../../../bottle.pydocstring of bottle.BaseTemplate.__init__:1
msgid ""
"Create a new template. If the source parameter (str or buffer) is missing, "
"the name argument is used to guess a template filename. Subclasses can "
"assume that self.source and/or self.filename are set. Both are strings. The "
"lookup, encoding and settings parameters are stored as instance variables. "
"The lookup parameter stores a list containing directory paths. The encoding "
"parameter should be used to decode byte strings or files. The settings "
"parameter contains a dict for engine-specific settings."
msgstr ""

# 0a387a4577f6405eaf98a37a61d0f2ec
#: ../../../bottle.pydocstring of bottle.BaseTemplate.search:1
msgid ""
"Search name in all directories specified in lookup. First without, then with"
" common extensions. Return first hit."
msgstr ""

# c5f01699b03848ec83108c3ab3d61e7b
#: ../../../bottle.pydocstring of bottle.BaseTemplate.global_config:1
msgid "This reads or sets the global settings stored in class.settings."
msgstr ""

# b469609052c64ab8a2307a101df89794
#: ../../../bottle.pydocstring of bottle.BaseTemplate.prepare:1
msgid ""
"Run preparations (parsing, caching, ...). It should be possible to call this"
" again to refresh a template or to update settings."
msgstr ""

# b0e0cf5738124644b3d6e810ea2c674c
#: ../../../bottle.pydocstring of bottle.BaseTemplate.render:1
msgid ""
"Render the template with the specified local variables and return a single "
"byte or unicode string. If it is a byte string, the encoding must match "
"self.encoding. This method must be thread-safe! Local variables may be "
"provided in dictionaries (args) or directly, as keywords (kwargs)."
msgstr ""

# c47623a8c5a343688b09e921168bc196
#: ../../../bottle.pydocstring of bottle.view:1
msgid ""
"Decorator: renders a template for a handler. The handler can control its "
"behavior like that:"
msgstr ""

# d8a29546f79948719055cf70f93a9db6
#: ../../../bottle.pydocstring of bottle.view:4
msgid "return a dict of template vars to fill out the template"
msgstr ""

# ebbd7b3300fb4937bbcf7f5fce68ec03
#: ../../../bottle.pydocstring of bottle.view:5
msgid ""
"return something other than a dict and the view decorator will not process "
"the template, but return the handler result as is. This includes returning a"
" HTTPResponse(dict) to get, for instance, JSON with autojson or other "
"castfilters."
msgstr ""

# aa3fabfae2304feaa7bdbc00548da4d6
#: ../../../bottle.pydocstring of bottle.template:1
msgid ""
"Get a rendered template as a string iterator. You can use a name, a filename"
" or a template string as first parameter. Template rendering arguments can "
"be passed as dictionaries or directly (as keyword arguments)."
msgstr ""

# b45c741d466544a38359d794a1cf8f35
#: ../../api.rst:185
msgid ""
"You can write your own adapter for your favourite template engine or use one"
" of the predefined adapters. Currently there are four fully supported "
"template engines:"
msgstr ""

# be4af6e5b3a64305b8b2878691e2ef06
#: ../../api.rst:188
msgid "Class"
msgstr ""

# 7a38f5e94efc4498885ef607a945cf33
#: ../../api.rst:188
msgid "URL"
msgstr ""

# 8a0e056b53ec45fba497a2b60a0c4649
#: ../../api.rst:188
msgid "Decorator"
msgstr ""

# 7b2f88404a304adc92fd24d0683d9b53
#: ../../api.rst:188
msgid "Render function"
msgstr ""

# 620ced0c0d874a1f9ccc257ee60684c7
#: ../../api.rst:190
msgid ":class:`SimpleTemplate`"
msgstr ""

# 2ff40d9ee2144cef8361810e3c1ffca5
#: ../../api.rst:190
msgid ":doc:`stpl`"
msgstr ""

# 679a5bf04eb84839ba5dce535fac7075
#: ../../api.rst:190
msgid ":func:`view`"
msgstr ""

# 084ceccb6e654de1b7780aacd02b5d7a
#: ../../api.rst:190
msgid ":func:`template`"
msgstr ""

# 32d0c9a657514049850040c6165d181d
#: ../../api.rst:191
msgid ":class:`MakoTemplate`"
msgstr ""

# eb594f637e894a468174d7f156ea967c
#: ../../api.rst:191
msgid "http://www.makotemplates.org"
msgstr ""

# 6a1703ce35474fbb9ae583b83d416fa6
#: ../../api.rst:191
msgid ":func:`mako_view`"
msgstr ""

# 30e950227f08428babe5c2962d8b2bc6
#: ../../api.rst:191
msgid ":func:`mako_template`"
msgstr ""

# 787003553b174372889067d59a439eca
#: ../../api.rst:192
msgid ":class:`CheetahTemplate`"
msgstr ""

# af8c6891d36e410b8a1fe19c69404c7d
#: ../../api.rst:192
msgid "http://www.cheetahtemplate.org/"
msgstr ""

# 85a4f3d5c61f4e34bab48f5e59e2c431
#: ../../api.rst:192
msgid ":func:`cheetah_view`"
msgstr ""

# 580562fcaef14a179eb8a5b2d3efd58f
#: ../../api.rst:192
msgid ":func:`cheetah_template`"
msgstr ""

# 3f74059a7ed94382b974e71b62399785
#: ../../api.rst:193
msgid ":class:`Jinja2Template`"
msgstr ""

# 36b589d422aa4d899a5a7a5695cad02f
#: ../../api.rst:193
msgid "http://jinja.pocoo.org/"
msgstr ""

# eb592bda51b841c18d1ec4ad392e23a9
#: ../../api.rst:193
msgid ":func:`jinja2_view`"
msgstr ""

# c1a048d5069e4245a3af8bf1d0aa0d23
#: ../../api.rst:193
msgid ":func:`jinja2_template`"
msgstr ""

# 7d2ff66af77f4f75a6161b03f7ffce80
#: ../../api.rst:196
msgid ""
"To use :class:`MakoTemplate` as your default template engine, just import "
"its specialised decorator and render function::"
msgstr ""
