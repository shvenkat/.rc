# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2009-2015, Marcel Hellkamp
# This file is distributed under the same license as the Bottle package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Bottle 0.13-dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-01-22 16:45-0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../configuration.rst:3
# 41dd5a760ca64fd1b2a969eb2e9735d7
msgid "Configuration (DRAFT)"
msgstr ""

#: ../../configuration.rst:8
# 9f5442bfb4ba4ef7a3491f5ee2f83c1d
msgid "This is a draft for a new API. `Tell us <mailto:bottlepy@googlegroups.com>`_ what you think."
msgstr ""

#: ../../configuration.rst:10
# df022256d2554261a177c1941072519b
msgid "Bottle applications can store their configuration in :attr:`Bottle.config`, a dict-like object and central place for application specific settings. This dictionary controls many aspects of the framework, tells (newer) plugins what to do, and can be used to store your own configuration as well."
msgstr ""

#: ../../configuration.rst:13
# 7de19ce5de5146328e6daa85560853b1
msgid "Configuration Basics"
msgstr ""

#: ../../configuration.rst:15
# c2d1d9ca89e946bfb57ca6a751966a23
msgid "The :attr:`Bottle.config` object behaves a lot like an ordinary dictionary. All the common dict methods work as expected. Let us start with some examples::"
msgstr ""

#: ../../configuration.rst:44
# 921ae4e0b55d469e96ae218b5dad242b
msgid "The app object is not always available, but as long as you are within a request context, you can use the `request` object to get the current application and its configuration::"
msgstr ""

#: ../../configuration.rst:51
# 3ae97017b4144341ab54e5276441d8c2
msgid "Naming Convention"
msgstr ""

#: ../../configuration.rst:53
# 2c092c7037fe46579c071acf148c939e
msgid "To make life easier, plugins and applications should follow some simple rules when it comes to config parameter names:"
msgstr ""

#: ../../configuration.rst:55
# fc3fbb508cd24642b2b5462206c54acb
msgid "All keys should be lowercase strings and follow the rules for python identifiers (no special characters but the underscore)."
msgstr ""

#: ../../configuration.rst:56
# 24f2e66b3ae34af9b25114c9fb3e3625
msgid "Namespaces are separated by dots (e.g. ``namespace.field`` or ``namespace.subnamespace.field``)."
msgstr ""

#: ../../configuration.rst:57
# 237bffb361414e67988117fb945c93b4
msgid "Bottle uses the root namespace for its own configuration. Plugins should store all their variables in their own namespace (e.g. ``sqlite.db`` or ``werkzeug.use_debugger``)."
msgstr ""

#: ../../configuration.rst:58
# cd76f935f79c4e269b988be703f5d741
msgid "Your own application should use a separate namespace (e.g. ``myapp.*``)."
msgstr ""

#: ../../configuration.rst:62
# e51f19210f1048818c4d6d5a3171bb7e
msgid "Loading Configuration from a File"
msgstr ""

#: ../../configuration.rst:66
# b7c704ced8de4b80a781e5e8e0861bd6
msgid "Configuration files are useful if you want to enable non-programmers to configure your application, or just don't want to hack python module files just to change the database port. A very common syntax for configuration files is shown here:"
msgstr ""

#: ../../configuration.rst:78
# 641c33bddb35403ab0fe8a6d00339ebb
msgid "With :meth:`ConfigDict.load_config` you can load these ``*.ini`` style configuration files from disk and import their values into your existing configuration::"
msgstr ""

#: ../../configuration.rst:84
# bde80d0bfa9f43f78f2d64f90c45b72f
msgid "Loading Configuration from a nested :class:`dict`"
msgstr ""

#: ../../configuration.rst:88
# 7319a191901b435b990ee7499608e960
msgid "Another useful method is :meth:`ConfigDict.load_dict`. This method takes an entire structure of nested dictionaries and turns it into a flat list of keys and values with namespaced keys::"
msgstr ""

#: ../../configuration.rst:109
# c5045a1a02544a56aef81d15d98e99e5
msgid "Listening to configuration changes"
msgstr ""

#: ../../configuration.rst:113
# 723b9a5b13bf486b8f1843ab05bc400b
msgid "The ``config`` hook on the application object is triggered each time a value in :attr:`Bottle.config` is changed. This hook can be used to react on configuration changes at runtime, for example reconnect to a new database, change the debug settings on a background service or resize worker thread pools. The hook callback receives two arguments (key, new_value) and is called before the value is actually changed in the dictionary. Raising an exception from a hook callback cancels the change and the old value is preserved."
msgstr ""

#: ../../configuration.rst:122
# c7f9316bc6a045bf8e9215a0597b7b38
msgid "The hook callbacks cannot *change* the value that is to be stored to the dictionary. That is what filters are for."
msgstr ""

#: ../../configuration.rst:128
# 27c52380f44c4bfba0c8ca35c74e75d2
msgid "Filters and other Meta Data"
msgstr ""

#: ../../configuration.rst:132
# cb1c23553991419ab8bb660009f67990
msgid ":class:`ConfigDict` allows you to store meta data along with configuration keys. Two meta fields are currently defined:"
msgstr ""

#: ../../configuration.rst:136
# 7b73714a96e8483ebfa5f1384e311b29
msgid "help"
msgstr ""

#: ../../configuration.rst:135
# 19be8769e56849788d8b8fd13e5f1ccc
msgid "A help or description string. May be used by debugging, introspection or admin tools to help the site maintainer configuring their application."
msgstr ""

#: ../../configuration.rst:139
# 1a17a0ed92f34a5d941d20205ef53ba3
msgid "filter"
msgstr ""

#: ../../configuration.rst:139
# a2873afa468d45fd8dbae4b0ba6b8e71
msgid "A callable that accepts and returns a single value. If a filter is defined for a key, any new value stored to that key is first passed through the filter callback. The filter can be used to cast the value to a different type, check for invalid values (throw a ValueError) or trigger side effects."
msgstr ""

#: ../../configuration.rst:141
# c394622ffc8f46e7a9d3538ea73155fe
msgid "This feature is most useful for plugins. They can validate their config parameters or trigger side effects using filters and document their configuration via ``help`` fields::"
msgstr ""

#: ../../configuration.rst:163
# 11079f458d1e430695566c654c93dbc9
msgid "API Documentation"
msgstr ""

#: ../../../bottle.py:docstring of bottle.ConfigDict:1
# 64e730addd274fcbb8a9b72c0aa47918
msgid "A dict-like configuration storage with additional support for namespaces, validators, meta-data, on_change listeners and more."
msgstr ""

#: ../../../bottle.py:docstring of bottle.ConfigDict.load_config:1
# c0fd04ccbf6a4891bbae4f4c06409ef0
msgid "Load values from an ``*.ini`` style config file."
msgstr ""

#: ../../../bottle.py:docstring of bottle.ConfigDict.load_config:3
# c650309c63f04a23b00cbfe9235f4a99
msgid "If the config file contains sections, their names are used as namespaces for the values within. The two special sections ``DEFAULT`` and ``bottle`` refer to the root namespace (no prefix)."
msgstr ""

#: ../../../bottle.py:docstring of bottle.ConfigDict.load_dict:1
# eb236c7b588248229206d0e945150a6e
msgid "Load values from a dictionary structure. Nesting can be used to represent namespaces."
msgstr ""

#: ../../../bottle.py:docstring of bottle.ConfigDict.update:1
# 08a5e29d7c3d4a4fa604dd7963b5c848
msgid "If the first parameter is a string, all keys are prefixed with this namespace. Apart from that it works just as the usual dict.update(). Example: ``update('some.namespace', key='value')``"
msgstr ""

#: ../../../bottle.py:docstring of bottle.ConfigDict.meta_get:1
# a9fbbf7583bd47a780c12874017194b8
msgid "Return the value of a meta field for a key."
msgstr ""

#: ../../../bottle.py:docstring of bottle.ConfigDict.meta_set:1
# 5d9c253ad9254a7fb6e7e2fde5c96511
msgid "Set the meta field for a key to a new value. This triggers the on-change handler for existing keys."
msgstr ""

#: ../../../bottle.py:docstring of bottle.ConfigDict.meta_list:1
# 6ff07db9d5a04ad1b67e891192c722e6
msgid "Return an iterable of meta field names defined for a key."
msgstr ""

