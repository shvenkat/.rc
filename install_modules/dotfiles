#!/bin/sh

set -e -u -o pipefail


NAME="$(basename -- "$0")"
PREFIX="$(dirname -- "$0")"
BIN="$PREFIX/../bin"

DOTFILES_URL="https://github.com/shvenkat/dotfiles"
DOTFILES_CLONE="${HOME}/.fresh/source/shvenkat/dotfiles"
FRESH_URL="https://github.com/freshshell/fresh"
FRESH_CLONE="${HOME}/.fresh/source/freshshell/fresh"
FRESHRC_TARGET="${DOTFILES_CLONE}/install_modules/freshrc"
FRESHRC_SYMLINK="${HOME}/.freshrc"
PLUGIN_CACHE="${HOME}/tmp/install_cache"


# Show usage.
# Args: None.
usage () {
    echo "Usage: $NAME [-h|--help]"
    echo '    Clones the dotfiles repo and installs dotfiles using fresh.'
}


# ----------  Logging  -------------------------------------------------------

# Initialize logging by setting global variables.
init_logger () {
    if [ -t 1 ]; then
        NORMAL="\e[0m"
        BOLD="\e[1m"
        RED="\e[31m"
        YELLOW="\e[33m"
    else
        NORMAL=""
        BOLD=""
        RED=""
        YELLOW=""
    fi
}


# Output formatted error message and exit.
error () {
    env echo -e "${RED}ERROR${NORMAL}${BOLD}   [$NAME]  $*${NORMAL}"
    exit 1
}


# Output formatted warning messages.
warn () {
    env echo -e "${YELLOW}WARNING${NORMAL}${BOLD} [$NAME]  $*${NORMAL}"
}


# Output formatted informational messages.
info () {
    env echo -e "${BOLD}INFO    [$NAME]  $*${NORMAL}"
}

# Output formatted debug messages.
# Args:
#   $@: Messages.
debug () {
    env echo -e "${NORMAL}DEBUG   [$NAME]  $*"
}


# Run a command, logging its output. If an error is encountered, output an error message and exit.
# Args:
#   $@: Command and arguments to be run.
run () {
    debug "Running: $* (in $(pwd))."
    ("$@" 2>&1 | while IFS='' read -r line; do echo "        $line"; done) \
        || error "$1 command failed."
}


# ----------  functions  -----------------------------------------------------

# Create a symlink. Fail if the target exists and is not a symlink.
# Args:
#   $1: Path to which the link points.
#   $2: Link itself.
ln_safe () {
    # If a non-symlink exists, abort with a warning.
    test -e "$2" && test ! -h "$2" \
        && error "Cannot create symlink $2 -> $1; the former exists and is not a symlink."
    run ln -sf "$1" "$2"
}


# ----------  main  ----------------------------------------------------------

init_logger

# Check usage.
if [ $# -eq 1 ] && ([ "$1" = "-h" ] || [ "$1" = "--help" ]); then
    usage
    exit 0
fi
if [ $# -gt 0 ]; then
    usage
    exit 1
fi

# Install freshrc.
info "Cloning/updating dotfiles repo in $DOTFILES_CLONE."
run "$BIN/git-safeclone" "$DOTFILES_URL" "$DOTFILES_CLONE"
info "Setting symlink $FRESHRC_SYMLINK"
ln_safe "$FRESHRC_TARGET" "$FRESHRC_SYMLINK"

# Run fresh.
info "Cloning/updating fresh repo."
run "$BIN/git-safeclone" "$FRESH_URL" "$FRESH_CLONE"
info "Installing (a read-only copy of) dotfiles per $FRESHRC_SYMLINK."
run "$FRESH_CLONE/bin/fresh install"

# Create build cache, if needed.
mkdir -p "$PLUGIN_CACHE"

# Install neovim plugins, using a build cache.
if which nvim >/dev/null 2>&1; then
    # Install python neovim package (required for plugins that use python).
    info "Ensuring installation of python package neovim."
    (pip3 list 2>/dev/null | grep neovim >/dev/null 2>&1) \
        || run pip3 install --ignore-installed neovim==0.1.9
    neovim_plugin_install="$HOME/.config/nvim/bundle"
    neovim_plugin_cache="$PLUGIN_CACHE/.config/nvim/bundle"
    if [ ! -d "$neovim_plugin_install" ] && [ -d "$neovim_plugin_cache" ]; then
        info "Restoring neovim plugins from the build cache."
        run cp -a "$neovim_plugin_cache/" "$neovim_plugin_install/"
    fi
    info "Installing/updating neovim plugins."
    run nvim --headless +PlugUpgrade +PlugUpdate +PlugClean +qall
    info "Caching neovim plugin builds."
    # TODO Use rsync.
    run cp -a "$neovim_plugin_install/" "$neovim_plugin_cache/"
fi

# Install zsh plugins, using a build cache.
if which zsh >/dev/null 2>&1; then
    zsh_plugin_install="$HOME/.zplug/repos"
    zsh_plugin_cache="$PLUGIN_CACHE/.zplug/repos"
    if [ ! -d "$zsh_plugin_install" ] && [ -d "$zsh_plugin_cache" ]; then
        info "Restoring zsh plugins from the build cache."
        run cp -a "$zsh_plugin_cache/" "$zsh_plugin_install/"
    fi
    info "Installing/updating zsh plugins."
    zplug_preamble="source $HOME/.zshrc &&"
    zsh -c "$zplug_preamble zplug check" \
        || run zsh -c "$zplug_preamble zplug install"
    run zsh -c "$zplug_preamble zplug update"
    run "$zplug_preamble zplug clean"
    run "$zplug_preamble zplug clear"
    info "Caching zsh plugin builds."
    # TODO Use rsync.
    run cp -a "$zsh_plugin_install/" "$zsh_plugin_cache/"
fi

# Warn if SSH config is missing. SSH config and keys must be installed manually.
[ -r "$HOME/.ssh/config" ] || warn 'Missing SSH config; install if needed.'
[ -r "$HOME/.ssh/id_rsa" ] || warn 'Missing default SSH key; install if needed.'
