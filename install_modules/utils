#!/bin/sh

set -e -u -o pipefail


NAME="$(basename -- "$0")"
PREFIX="$(dirname -- "$0")"
OSTYPE="$(uname -s | tr '[:upper:]' '[:lower:]')"

HOMEBREW_INSTALL_URL="https://raw.githubusercontent.com/Homebrew/install/master/install"
LINUXBREW_INSTALL_URL="https://raw.githubusercontent.com/Linuxbrew/install/master/install"

HOMEBREW_TAPS="$PREFIX/brew/homebrew_taps.txt"
HOMEBREW_FORMULAS="$PREFIX/brew/homebrew_formulas.txt"
LINUXBREW_TAPS="$PREFIX/brew/linuxbrew_taps.txt"
LINUXBREW_FORMULAS="$PREFIX/brew/linuxbrew_formulas.txt"


# Show usage.
# Args: None.
usage () {
    echo "Usage: $NAME [-h|--help]"
    echo '    Installs various utilities, using bork.'
}


# ----------  Logging  -------------------------------------------------------

# Initialize logging by setting global variables.
init_logger () {
    if [ -t 1 ]; then
        NORMAL="\e[0m"
        BOLD="\e[1m"
        RED="\e[31m"
        YELLOW="\e[33m"
    else
        NORMAL=""
        BOLD=""
        RED=""
        YELLOW=""
    fi
}


# Output formatted error message and exit.
error () {
    env echo -e "${RED}ERROR${NORMAL}${BOLD}   [$NAME]  $*${NORMAL}"
    exit 1
}


# Output formatted warning messages.
warn () {
    env echo -e "${YELLOW}WARNING${NORMAL}${BOLD} [$NAME]  $*${NORMAL}"
}


# Output formatted informational messages.
info () {
    env echo -e "${BOLD}INFO    [$NAME]  $*${NORMAL}"
}

# Output formatted debug messages.
# Args:
#   $@: Messages.
debug () {
    env echo -e "${NORMAL}DEBUG   [$NAME]  $*"
}


# Run a command, logging its output. If an error is encountered, output an error message and exit.
# Args:
#   $@: Command and arguments to be run.
run () {
    debug "Running: $* (in $(pwd))."
    ("$@" 2>&1 | while IFS='' read -r line; do echo "        $line"; done) \
        || error "$1 command failed."
}


# ----------  main  ----------------------------------------------------------

init_logger

# Check usage.
if [ $# -eq 1 ] && ([ "$1" = "-h" ] || [ "$1" = "--help" ]); then
    usage
    exit 0
fi
if [ $# -gt 0 ]; then
    usage
    exit 1
fi

# Homebrew/Linuxbrew.
if ! which brew >/dev/null 2>&1; then
    case "$OSTYPE" in
        linux*)
            info "Installing Linuxbrew."
            run /usr/bin/env ruby -e "$(curl -fsSL "$LINUXBREW_INSTALL_URL")"
            export PATH="$HOME/.linuxbrew/bin:$PATH"
            ;;
        darwin*)
            info "Installing Homebrew."
            run /usr/bin/env ruby -e "$(curl -fsSL "$HOMEBREW_INSTALL_URL")"
            export PATH="/usr/local/bin:$PATH"
            ;;
        *)
            error "Error: unknown OS - $OSTYPE."
            ;;
    esac
fi

# Bork.
if ! which bork >/dev/null 2>&1; then
    info "Installing bork (bleeding edge version)."
    run brew install --HEAD bork
fi

# Git
if ! which git >/dev/null 2>&1; then
    info "Installing git."
    run brew install git
fi

# Various utilities.
case "$OSTYPE" in
    linux*)
        TAPS="$LINUXBREW_TAPS"
        FORMULAS="$LINUXBREW_FORMULAS"
        ;;
    darwin*)
        TAPS="$HOMEBREW_TAPS"
        FORMULAS="$HOMEBREW_FORMULAS"
        ;;
    *)
        error "Error: unknown OS - $OSTYPE."
        ;;
esac
if [ -r "$TAPS" ] && [ -r "$FORMULAS" ]; then
    while IFS='' read -r tap; do
        if echo "$tap" | grep -q '^[^#]'; then
            info "Ensuring installation of brew tap $tap."
            run bork 'do' ok brew-tap "$tap"
        fi
    done < "$TAPS"
    while IFS='' read -r formula; do
        if echo "$formula" | grep -q '^[^#]'; then
            info "Ensuring installation of brew formula $formula."
            run bork 'do' ok brew "$formula"
        fi
    done < "$FORMULAS"
fi
